{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/app/pages/create/create.component.ts","webpack:///src/app/pages/create/create.component.html","webpack:///src/app/pages/index/index.component.ts","webpack:///src/app/pages/index/index.component.html","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.component.html","webpack:///src/app/pages/profile-puzzles/profile-puzzles.component.html","webpack:///src/app/pages/profile-puzzles/profile-puzzles.component.ts","webpack:///src/app/pages/profile-ratings/profile-ratings.component.ts","webpack:///src/app/pages/profile-ratings/profile-ratings.component.html","webpack:///src/app/pages/profile/profile.component.ts","webpack:///src/app/pages/profile/profile.component.html","webpack:///src/app/pages/ratings/RatingsArr.ts","webpack:///src/app/pages/ratings/puzzleArr.ts","webpack:///src/app/pages/ratings/ratings.component.ts","webpack:///src/app/pages/ratings/ratings.component.html","webpack:///src/app/pages/reset-password/reset-password.component.ts","webpack:///src/app/pages/reset-password/reset-password.component.html","webpack:///src/app/pages/reset-success/reset-success.component.ts","webpack:///src/app/pages/reset-success/reset-success.component.html","webpack:///src/app/pages/signup/signup.component.ts","webpack:///src/app/pages/signup/signup.component.html","webpack:///src/app/rate-dialog/rate-dialog.component.ts","webpack:///src/app/rate-dialog/rate-dialog.component.html","webpack:///src/app/services/api.service.ts","webpack:///src/assets/js/manualCreation.js","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","entryComponents","providers","bootstrap","NavbarComponent","router","localStorage","removeItem","navigate","name","getItem","logout","CreateComponent","token","IndexComponent","LoginComponent","formBuilder","api","error_messages","type","message","currentUser","formError","verifyUser","email","password","loginUser","subscribe","data","console","log","setItem","setTimeout","alert","error","status","loginForm","group","required","minLength","ProfilePuzzlesComponent","temp","getPuzzlesByUser","userPuzzleList","text","getBase64ImageFromUrl","image","result","tee","err","show","imageUrl","fetch","res","blob","reject","reader","FileReader","addEventListener","onerror","readAsDataURL","puzzle","sharePuzzle","location","reload","stopSharingPuzzle","getUserPuzzles","ProfileRatingsComponent","dialog","getPuzzleRatingsByUser","userRatingsList","ratePID","rateDialogRef","open","afterClosed","ratingEntry","createNewPuzzleRating","rateP","checkData","openRateDialog","getUserPuzzleRatings","ProfileComponent","nameTextboxValue","undefined","updateName","currentUserObject","usernameTextboxValue","updateUsername","getUser","updateNameForm","pattern","updateUsernameForm","username","RatingsArr","PuzzleArr","RatingsComponent","cdr","puzzles","ratings","populatePuz","length","getAllPuzzleRatings","i","ratingObj","rating","puzzleID","push","getPuzzles","getAllPuzzles","searchValue","getSearchedPuzzles","dataObjectSize","Object","populate","puzzleObj","description","creator","created","createdAt","showRating","j","total","k","toString","toFixed","dataAvailable","searchItems","ResetPasswordComponent","resetDone","doPasswordsMatch","resetPasswordForm","controls","value","resetPassword","confirmPassword","firstPassword","secondPassword","ResetSuccessComponent","route","snapshot","paramMap","get","SignupComponent","createUser","signUpForm","newUser","createNewUser","RateDialogComponent","dialogRef","form","close","submit","APIService","http","httpOptions","headers","post","put","term","providedIn","everything","apiURL","distanceMetric","setDistanceMetric","metric","window","onload","puzzleImage","canvas","document","getElementById","canvasCoords","getBoundingClientRect","width","offsetWidth","height","offsetHeight","sites","siteBoundaries","precision","colors","generateButtonClicked","piecesJSONObject","stage","Stage","container","layer","Layer","square","Rect","x","y","stroke","strokeWidth","add","event","clientX","clientY","point","createPoint","draw","Circle","radius","generatePuzzle","innerHTML","puzzleName","puzzleDescription","toDataURL","pixelRatio","jsonData","puzzleObject","shared","$","ajax","url","contentType","JSON","stringify","dataType","success","src","generateSiteBoundaries","createPieces","colorCount","trimmedPoints","trimPoints","piece","Line","points","draggable","on","body","style","cursor","pieces","pointArray","lastPointCol","firstPointCol","currentRow","index","row","col","distances","calculateDistancesFromSitesToPoint","equidistantPoints","equidistantPointsPresent","returnArray","minimumDistance","Math","min","counter","indexOf","splice","xOfPoint","yOfPoint","sitePoints","calculateEuclideanDistance","calculateManhattanDistance","point1X","point1Y","point2X","point2Y","pow","resultX","resultY","createModule","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SignupComponent } from './pages/signup/signup.component';\r\nimport { IndexComponent } from './pages/index/index.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { ProfileComponent } from './pages/profile/profile.component';\r\nimport { ProfilePuzzlesComponent } from './pages/profile-puzzles/profile-puzzles.component'\r\nimport { ProfileRatingsComponent } from './pages/profile-ratings/profile-ratings.component'\r\nimport { RatingsComponent } from './pages/ratings/ratings.component';\r\nimport { ResetPasswordComponent } from './pages/reset-password/reset-password.component';\r\nimport { ResetSuccessComponent } from './pages/reset-success/reset-success.component';\r\nimport { CreateComponent } from './pages/create/create.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: 'index', component: IndexComponent},\r\n  {path: 'signup', component: SignupComponent},\r\n  {path: 'login', component: LoginComponent},\r\n  {path: 'profile', component: ProfileComponent},\r\n  {path: 'profilePuzzles', component: ProfilePuzzlesComponent},\r\n  {path: 'profileRatings', component: ProfileRatingsComponent},\r\n  {path: 'ratings', component: RatingsComponent},\r\n  {path: 'resetPassword', component: ResetPasswordComponent},\r\n  {path: 'resetSuccess', component: ResetSuccessComponent},\r\n  {path: 'create', component: CreateComponent},\r\n\r\n    // otherwise redirect to home\r\n  { path: '', redirectTo: '/index', pathMatch: 'full' },\r\n  { path: '**', component: IndexComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'prometheus-puzzles';\r\n  \r\n  constructor() {\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport {NgxPaginationModule} from 'ngx-pagination';\r\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n//\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport { MatToolbarModule} from '@angular/material/toolbar';\r\nimport { MatTableModule} from '@angular/material/table';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatGridListModule } from '@angular/material/grid-list'\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport {MatListModule} from '@angular/material/list';\r\n\r\n\r\n//pages\r\nimport { IndexComponent } from './pages/index/index.component';\r\nimport { SignupComponent } from './pages/signup/signup.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { ProfileComponent } from './pages/profile/profile.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { RatingsComponent } from './pages/ratings/ratings.component';\r\nimport { ResetPasswordComponent } from './pages/reset-password/reset-password.component';\r\nimport { ResetSuccessComponent } from './pages/reset-success/reset-success.component';\r\nimport { CreateComponent } from './pages/create/create.component';\r\nimport { RateDialogComponent } from './rate-dialog/rate-dialog.component';\r\nimport { ProfilePuzzlesComponent } from './pages/profile-puzzles/profile-puzzles.component';\r\nimport { ProfileRatingsComponent } from './pages/profile-ratings/profile-ratings.component';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    IndexComponent,\r\n    SignupComponent,\r\n    LoginComponent,\r\n    ProfileComponent,\r\n    RatingsComponent,\r\n    NavbarComponent,\r\n    ResetPasswordComponent,\r\n    ResetSuccessComponent,\r\n    CreateComponent,\r\n    RateDialogComponent,\r\n    ProfilePuzzlesComponent,\r\n    ProfileRatingsComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NgxPaginationModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    FlexLayoutModule,\r\n    MatButtonModule,\r\n    MatDividerModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatProgressSpinnerModule,\r\n    MatToolbarModule,\r\n    MatTableModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    MatInputModule, MatListModule,\r\n    MatCardModule, MatFormFieldModule, MatDialogModule, MatGridListModule, MatRadioModule, ReactiveFormsModule,\r\n    MDBBootstrapModule.forRoot(),\r\n  ],\r\n  entryComponents: [RateDialogComponent],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n//import { getName } from '.././pages/login/login.component';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  name:string;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  logout(){\r\n    localStorage.removeItem('token');\r\n    this.router.navigate(['/index']);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.name = localStorage.getItem('name');\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n  <mdb-navbar id=\"navCustom\" SideClass=\"navbar\">\r\n    <div>\r\n        <ul class=\"nav navbar-nav mr-auto\" routerLinkActive=\"active\">\r\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"/ratings\">View</a></li>\r\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"/create\">Create</a></li>\r\n            <li class=\"nav-item dropdown\" dropdown>\r\n              <a dropdownToggle mdbWavesEffect type=\"button\" class=\"nav-link dropdown-toggle waves-light\" mdbWavesEffect>Profile<div class=\"caret\"></div></a>\r\n               <div *dropdownMenu class=\"dropdown-menu dropdown dropdown-primary\" role=\"menu\">\r\n                 <a class=\"dropdown-item waves-light\" routerLink=\"/profile\" mdbWavesEffect>My Details</a><br>\r\n                 <a class=\"dropdown-item waves-light\" routerLink=\"/profileRatings\" mdbWavesEffect>My Ratings</a><br>\r\n                 <a class=\"dropdown-item waves-light\" routerLink=\"/profilePuzzles\" mdbWavesEffect>My Puzzles</a>\r\n               </div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <span class=\"navbar-text\">\r\n        Hello, {{name}}\r\n        <a id=\"logout\" (click)=\"logout()\">Logout</a>\r\n    </span>\r\n  </mdb-navbar>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { createModule } from 'src/assets/js/manualCreation.js';\r\nimport Konva from 'konva';\r\n\r\n@Component({\r\n  selector: 'app-create',\r\n  templateUrl: './create.component.html',\r\n  styleUrls: ['./create.component.css']\r\n})\r\nexport class CreateComponent implements OnInit {\r\n\r\n  token: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    createModule;\r\n    this.token = localStorage.getItem('token')\r\n  }\r\n\r\n}\r\n","<img src=\"assets/images/logo.jpg\">\r\n<app-navbar></app-navbar>\r\n<div class=\"container-fluid\">\r\n  <!-- <h1 class=\"main-title\"><strong>LET'S CREATE</strong></h1> -->\r\n\r\n  <div class=\"content\">\r\n    <label id=\"label\">What puzzle type would you like to generate?</label>\r\n    <mat-radio-group class=\"radio-group\">\r\n      <mat-radio-button class=\"radio-button\" value=\"euclidean\" name=\"distanceMetric\" id=\"euclideanButton\" > Euclidian </mat-radio-button>\r\n      <mat-radio-button class=\"radio-button\" value=\"manhattan\" name=\"distanceMetric\" id=\"manhattanButton\" > Manhattan </mat-radio-button>\r\n    </mat-radio-group>\r\n    <br>\r\n    <label id=\"label\">Create puzzle by selecting points on the canvas</label>\r\n\r\n    <br>\r\n    <div id=\"container\">\r\n    </div>\r\n    <br>\r\n\r\n    <button mat-raised-button class=\"btns\" id=\"generatePuzzleButton\">Generate Puzzle</button> <br >\r\n      <label id=\"label\">Name: </label><input type=\"text\" name=\"puzzleName\" id=\"puzzleNameInputBox\"><br>\r\n      <label id=\"label\">Short Description: </label><input type=\"text\" name=\"puzzleDescription\" id=\"puzzleDescriptionInputBox\"><br>\r\n      <label hidden=\"true\" id=\"tokenLabel\">{{token}}</label>\r\n\r\n\r\n    <button mat-raised-button class=\"btns\" id=\"saveButton\">Save</button>\r\n    <button mat-raised-button class=\"btns\" id=\"saveAndSubmitButton\">Save and Submit</button>\r\n    <br><br>\r\n    <img src=\"\" id=\"testingImg\">\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-index',\r\n  templateUrl: './index.component.html',\r\n  styleUrls: ['./index.component.css']\r\n})\r\nexport class IndexComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n"," <img src=\"assets/images/websmalp.jpg\">\r\n<!--     <div class=\"why\">\r\n     <a href=\"#second\" class=\"btn\" id=\"more\">Learn More</a>\r\n    </div> -->\r\n\r\n\r\n      \r\n    <div class=\"container\" id=\"second\">\r\n\r\n        <h1 class=\"main-title\"><strong>C R E A T E .  S H A R E .  R A T E . </strong></h1>\r\n        <h2>Have fun creating 3D puzzles that can be shared, rated and printed</h2>\r\n        <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\" >\r\n    <div class=\"one\">\r\n        <div class=\"content\">\r\n            <div class=\"content-overlay\"></div>\r\n            <img class=\"content-image\" src=\"assets/images/puzzles/6.png\">\r\n            <div class=\"content-details fadeIn-bottom\">\r\n              <h3 class=\"content-title\">Geometric Puzzles</h3>\r\n              <p class=\"content-text\">This is a short description of a geometric equationed arithmatic puzzle. Magnified by bliss.</p>\r\n            </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"one\">\r\n        <div class=\"content\">\r\n            <div class=\"content-overlay\"></div>\r\n            <img class=\"content-image\" src=\"assets/images/puzzles/2.png\">\r\n            <div class=\"content-details fadeIn-bottom\">\r\n              <h3 class=\"content-title\">Arithmatic Puzzles</h3>\r\n              <p class=\"content-text\">This is a short description of a arithmatic equationed arithmatic puzzle. Magnified by razor.</p>\r\n            </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"one\">\r\n        <div class=\"content\">\r\n            <div class=\"content-overlay\"></div>\r\n            <img class=\"content-image\" src=\"assets/images/puzzles/6.png\">\r\n            <div class=\"content-details fadeIn-bottom\">\r\n              <h3 class=\"content-title\">Polygon Puzzles</h3>\r\n              <p class=\"content-text\">This is a short description of a polygon equationed arithmatic puzzle. Magnified by shoes.</p>\r\n            </div>\r\n\r\n        </div>\r\n      </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"try\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"center\" class=\"indexNavBtns\">\r\n        <a routerLink=\"/login\"  class=\"btn\">Login</a>\r\n        <a routerLink=\"/signup\"  class=\"btn\">Sign Up</a>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <!--\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"indexNavBtns\">\r\n        <mat-card fxFlex=\"90\" fxLayoutAlign=\"space-evenly center\">\r\n            <a routerLink=\"/login\" mat-raised-button class=\"btn\">Login\r\n            <a routerLink=\"/signup\" mat-raised-button class=\"btn\">Sign Up\r\n      </mat-card>\r\n    </div> -->\r\n\r\n\r\n    <!--\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"indexNavBtns\">\r\n        <mat-card fxFlex=\"90\" fxLayoutAlign=\"space-evenly center\">\r\n            <a routerLink=\"/login\" mat-raised-button class=\"btn\">Login\r\n            <a routerLink=\"/signup\" mat-raised-button class=\"btn\">Sign Up\r\n      </mat-card>\r\n    </div>\r\n     -->\r\n\r\n    <!-- <div class=\"content\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"descText\">\r\n            <mat-card fxFlex=\"90\">\r\n                    <p>Puzzles have been a hobby of many people over the centuries, coming in various\r\n                    forms which have various ways of solving. Puzzles have played a role in people’s\r\n                    problem solving skills. Puzzle generators have allowed for more puzzles to be\r\n                    created, using various techniques to create interesting and challenging puzzles.\r\n                    The system requested by the client involves the creation of 3-Dimensional puzzles (manually and from the use of AI), testing of puzzles, sharing and rating of\r\n                    puzzles by other users, as well as the ability of downloading 3D printable files.\r\n                    Team Prometheus, has come up with a way to develop the system according to\r\n                    the client’s specifications.</p>\r\n          </mat-card>\r\n        </div> -->\r\n\r\n\r\n\r\n        <!-- <div class=\"container\">\r\n        <br>\r\n        <br>\r\n        <br>\r\n        <br>\r\n        <br>\r\n        <br>\r\n        <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\" >\r\n            <div class=\"overlay\"></div>\r\n            <mat-card  class=\"child-1\">\r\n                <mat-card-header>\r\n                    <mat-card-title>Puzzle One</mat-card-title>\r\n                    <mat-card-subtitle class=\"one\">Created by {{puzzle.creator}}</mat-card-subtitle>\r\n                    <mat-card-subtitle class=\"one\">Rating: </mat-card-subtitle>\r\n                    <mat-card-subtitle class=\"one\">Date: </mat-card-subtitle>\r\n                    <mat-card-subtitle class=\"one\">Created by X</mat-card-subtitle>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                    <img class=\"indexImg\" src=\"assets/images/imgC.jpg\">\r\n                </mat-card-content>\r\n                <mat-card-actions>\r\n                    <button mat-button class=\"btns\">SOLVE</button>\r\n                    <button mat-button class=\"btns\">RATE</button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n\r\n            <mat-card  class=\"child-2\">\r\n                <mat-card-header>\r\n                    <mat-card-title>Puzzle One</mat-card-title>\r\n                    <mat-card-subtitle class=\"one\">Created by X</mat-card-subtitle>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                    <img class=\"indexImg\"  src=\"assets/images/imgB.jpg\">\r\n                </mat-card-content>\r\n                <mat-card-actions>\r\n                    <button mat-button class=\"btns\">SOLVE</button>\r\n                    <button mat-button class=\"btns\">RATE</button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n            <mat-card class=\"child-3\">\r\n                <mat-card-header>\r\n                    <mat-card-title>Puzzle One</mat-card-title>\r\n                    <mat-card-subtitle class=\"one\">Created by X</mat-card-subtitle>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                    <img class=\"indexImg\"  src=\"assets/images/imgC.jpg\">\r\n                </mat-card-content>\r\n                <mat-card-actions>\r\n                    <button mat-button class=\"btns\">SOLVE</button>\r\n                    <button mat-button class=\"btns\">RATE</button>\r\n                </mat-card-actions>\r\n            </mat-card>\r\n        </div>\r\n\r\n\r\n                <a routerLink=\"/login\" mat-raised-button class=\"btn\">Login\r\n                <a routerLink=\"/signup\" mat-raised-button class=\"btn\">Sign Up\r\n\r\n\r\n    </div> -->\r\n\r\n    <!--\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"indexNavBtns\">\r\n        <mat-card fxFlex=\"90\" fxLayoutAlign=\"space-evenly center\">\r\n            <a routerLink=\"/login\" mat-raised-button class=\"btn\">Login\r\n            <a routerLink=\"/signup\" mat-raised-button class=\"btn\">Sign Up\r\n      </mat-card>\r\n    </div> -->\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { APIService } from 'src/app/services/api.service';\r\nimport { User } from 'src/app/models/user';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  verifyUser: any;\r\n  formError: string;\r\n\r\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router) {}\r\n  //method for logging in user and getting the token associated with the said user\r\n  loginUser(currentUser: User){\r\n    this.formError = '';\r\n    if(currentUser !== null){\r\n      this.verifyUser = {\r\n        \"username\":currentUser.email,\r\n        \"password\":currentUser.password\r\n      }\r\n\r\n      this.api.loginUser(this.verifyUser).subscribe(\r\n        data => { console.log(data);\r\n          localStorage.removeItem('name');\r\n          localStorage.setItem('name', data['name']);\r\n          localStorage.removeItem('token');\r\n          localStorage.setItem('token', data['token']);\r\n\r\n          // update api to get id as well\r\n          localStorage.removeItem('id');\r\n          localStorage.setItem('id', data['id']);\r\n          this.formError = \"\";\r\n        this.router.navigate(['/ratings']);\r\n\r\n        //var timeoutHandle = window.setTimeout(...);\r\n        //window.clearTimeout(timeoutHandle);\r\n        //timeoutHandle = window.setTimeout(...);\r\n\r\n        setTimeout(()=>{\r\n          localStorage.removeItem('token');\r\n          this.router.navigate(['login']);\r\n          alert(\"You have been logged out after 1 hour\");\r\n        },3600000);\r\n      },\r\n        error => {//if status code other than in the 200 range returned, show error\r\n          console.log('Error from API: ', error.error);\r\n          if(error.status >= 401){\r\n            this.formError = error.error;\r\n          }\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n  //error messages used during login/register validation\r\n  error_messages = {\r\n    'email': [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'email', message: 'Invalid email format.' }\r\n    ],\r\n    'password': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\r\n    ]\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\r\n        <mat-card class=\"regForm\">\r\n            <mat-card-header>\r\n                <h1>Login</h1>\r\n            </mat-card-header>\r\n            <mat-card-content class=\"regFormContent\">\r\n                <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser(loginForm.value)\">\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Enter your email</mat-label>\r\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.email\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(error.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Enter your password</mat-label>\r\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.password\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(error.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                            <span id=\"passError\">{{formError}}</span>\r\n                        </div>\r\n                    </div>\r\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!loginForm.valid\" class=\"btns\" id=\"one\">Login</button>\r\n                    <a routerLink=\"/index\" mat-raised-button class=\"btns\" id=\"two\">Cancel</a>\r\n                </form>\r\n            </mat-card-content>\r\n            <mat-card-actions>\r\n                <a routerLink=\"/resetPassword\" class=\"link\">Forgot Password</a>\r\n            </mat-card-actions>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n","<img src=\"assets/images/logo.jpg\">\r\n<app-navbar></app-navbar>\r\n\r\n<div class=\"container-fluid\">\r\n  <h1 class=\"main-title\">My Puzzles</h1>\r\n  <mat-spinner *ngIf=\"show\" id=\"spinner\"></mat-spinner>\r\n  <div *ngIf=\"currentUser\" class=\"flex-container\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\">\r\n    <mat-card *ngFor=\"let puzzle of userPuzzleList\" class=\"content\">\r\n      <div class=\"content-overlay\"></div>\r\n      <img class=\"content-image\" src=\"{{puzzle.image}}\">\r\n        <mat-card-header>\r\n            <mat-card-title>{{puzzle.name}}</mat-card-title>\r\n            <mat-card-subtitle>Description: {{puzzle.description}}</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <div class=\"content-details fadeIn-bottom\">\r\n            <h3 class=\"content-title\">{{puzzle.name}}</h3>\r\n            <button *ngIf=\"!puzzle.shared\" mat-button class=\"btns\" (click)=\"share(puzzle.id)\">SHARE</button>\r\n            <button *ngIf=\"puzzle.shared\" mat-button class=\"btns\" (click)=\"stopShare(puzzle.id)\">STOP SHARING</button>\r\n        </div>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <div *ngIf=\"text\">\r\n    <h3 id=\"NoneText\" >You have not created any puzzles at the moment</h3>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { APIService } from 'src/app/services/api.service';\r\nimport { Puzzle } from 'src/app/models/Puzzle';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-profile-puzzles',\r\n  templateUrl: './profile-puzzles.component.html',\r\n  styleUrls: ['./profile-puzzles.component.css']\r\n})\r\nexport class ProfilePuzzlesComponent implements OnInit {\r\n\r\n  currentUser: any;\r\n  //user  puzzle variables\r\n  //puzzleList: Observable <Puzzle[]> ;\r\n  userPuzzleList: any;\r\n  puzzle: any;\r\n  show: boolean;\r\n  text: boolean;\r\n  imageList: any;\r\n  temp: boolean = false;\r\n  tee: any;\r\n\r\n  constructor(private api: APIService, private router: Router) { }\r\n\r\n  getUserPuzzles(){\r\n    this.api.getPuzzlesByUser(this.currentUser).subscribe( data => {\r\n      this.userPuzzleList = data;\r\n      if (data[0]==null)\r\n      {\r\n        this.text = true;\r\n      }\r\n\r\n      //let puzzleImage = data[0].image.toDataURL();\r\n\r\n    this.temp = true;\r\n    this.getBase64ImageFromUrl(data[0].image)\r\n    .then(result => this.tee = result)\r\n    .catch(err => console.error(err));\r\n      this.show = false;\r\n    });\r\n  }\r\n\r\n  async getBase64ImageFromUrl(imageUrl) {\r\n    var res = await fetch(imageUrl);\r\n    var blob = await res.blob();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      var reader  = new FileReader();\r\n      reader.addEventListener(\"load\", function () {\r\n          resolve( reader.result);\r\n      }, false);\r\n\r\n      reader.onerror = () => {\r\n        return reject(this);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    })\r\n  }\r\n\r\n  share(data: any){\r\n    this.puzzle = {\r\n      \"puzzleID\": data\r\n    }\r\n    if(this.api.sharePuzzle(this.puzzle).subscribe()){\r\n        alert(\"Puzzle shared\");\r\n    }\r\n    location.reload();\r\n  }\r\n\r\n  stopShare(data: any){\r\n    this.puzzle = {\r\n      \"puzzleID\": data\r\n    }\r\n    if(this.api.stopSharingPuzzle(this.puzzle).subscribe()){\r\n        alert(\"Stop sharing puzzle\");\r\n    }\r\n    location.reload();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    if(!localStorage.getItem('token')){\r\n      this.router.navigate(['/index']);\r\n      alert(\"You are not logged in\");\r\n    }\r\n\r\n    this.currentUser = {\r\n      \"token\": localStorage.getItem('token')\r\n    }\r\n    this.show = true;\r\n    this.text = false;\r\n\r\n    this.getUserPuzzles();\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Puzzle } from 'src/app/models/Puzzle';\r\nimport { Observable } from 'rxjs';\r\nimport { APIService } from 'src/app/services/api.service';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { RateDialogComponent } from '../../rate-dialog/rate-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-profile-ratings',\r\n  templateUrl: './profile-ratings.component.html',\r\n  styleUrls: ['./profile-ratings.component.css']\r\n})\r\nexport class ProfileRatingsComponent implements OnInit {\r\n\r\n  currentUser: any;\r\n  //user puzzle ratings variables\r\n  //ratingList: Observable <any[]> ;\r\n  userRatingsList: any;\r\n  text: boolean;\r\n  ratePID: number;\r\n  ratingEntry: any;\r\n  rateDialogRef: MatDialogRef<RateDialogComponent>;\r\n  show: boolean;\r\n\r\n  constructor(private api: APIService, private router: Router, private dialog: MatDialog) { }\r\n\r\n  getUserPuzzleRatings(){\r\n    this.api.getPuzzleRatingsByUser(this.currentUser).subscribe( data => {\r\n      this.userRatingsList = data;\r\n      this.show = false;\r\n    });\r\n  }\r\n\r\n  checkData(data: any){\r\n    this.ratePID = data;\r\n    //this.rateUID = localStorage.getItem('token');\r\n    //this.rateUID = localStorage.getItem('id');\r\n    //console.log(localStorage.getItem('id'));\r\n  }\r\n\r\n  openRateDialog(){\r\n    this.rateDialogRef = this.dialog.open(RateDialogComponent);\r\n\r\n    this.rateDialogRef.afterClosed().subscribe( result => {\r\n      if (result != \"\"){\r\n\r\n        this.ratingEntry = {\r\n        //\"id\":this.rateUID,\r\n          \"puzzleID\":this.ratePID,\r\n          \"rating\":result,\r\n          \"token\": localStorage.getItem('token')\r\n        }\r\n\r\n        console.log(this.ratingEntry);\r\n\r\n        if(this.api.createNewPuzzleRating(this.ratingEntry).subscribe())\r\n        {\r\n          alert(\"Rating added\");\r\n        }\r\n\r\n        location.reload();\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  openAndCheck(rateP: any){\r\n    this.checkData(rateP);\r\n    this.openRateDialog();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    if(!localStorage.getItem('token')){\r\n      this.router.navigate(['/index']);\r\n      alert(\"You are not logged in\");\r\n    }\r\n\r\n    this.currentUser = {\r\n      \"token\": localStorage.getItem('token')\r\n    }\r\n\r\n    this.show = true;\r\n\r\n    this.getUserPuzzleRatings();\r\n  }\r\n\r\n}\r\n","<img src=\"assets/images/logo.jpg\">\r\n<app-navbar></app-navbar>\r\n<!--app-navbar-profile></app-navbar-profile-->\r\n<div class=\"container-fluid\">\r\n<h1 class=\"main-title\">My Ratings</h1>\r\n<mat-spinner *ngIf=\"show\" id=\"spinner\"></mat-spinner>\r\n<div *ngIf=\"currentUser\" class=\"flex-container\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\">\r\n    <mat-card *ngFor=\"let rating of userRatingsList\" class=\"content\">\r\n      <div class=\"content-overlay\"></div>\r\n      <img class=\"content-image\" src=\"{{rating.image}}\">\r\n        <mat-card-header>\r\n            <mat-card-title>{{rating.puzzleName}}</mat-card-title>\r\n            <mat-card-subtitle>Rating: {{rating.rating}}/5</mat-card-subtitle>\r\n        </mat-card-header>\r\n        <div class=\"content-details fadeIn-bottom\">\r\n            <h3 class=\"content-title\">{{rating.puzzleName}}</h3>\r\n            <button mat-button class=\"btns\">SOLVE</button>\r\n            <button mat-button class=\"btns\" (click)=\"openAndCheck(rating.puzzleID)\">UPDATE RATING</button>\r\n        </div>\r\n    </mat-card>\r\n</div>\r\n<div id=\"NoneText\" *ngIf=\"!show\">\r\n    <h3>You have not made any ratings at the moment</h3>\r\n</div>\r\n\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { APIService } from 'src/app/services/api.service';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  nameTextboxValue: string;\r\n  usernameTextboxValue: string;\r\n  currentUserObject:any;\r\n  token: any;\r\n  currentUser: any;\r\n  updateNameForm: FormGroup;\r\n  updateUsernameForm: FormGroup;\r\n\r\n  constructor(private api: APIService, private formBuilder: FormBuilder, private router: Router) { }\r\n\r\n  updateName(){\r\n    this.currentUser = null;\r\n      if(this.nameTextboxValue != undefined){\r\n      this.currentUser = {\r\n        \"token\": localStorage.getItem('token'),\r\n        \"name\": this.nameTextboxValue\r\n      }\r\n      localStorage.removeItem('name');\r\n      localStorage.setItem('name', this.currentUser['name']);\r\n      this.api.updateName(this.currentUser).subscribe( data => {\r\n        this.currentUserObject['name'] = data['name'];\r\n      });\r\n      alert(\"Name updated\");\r\n    }\r\n    else{ console.log(\"No value provided\");}\r\n    location.reload();\r\n  }\r\n\r\n  updateUsername(){\r\n    this.currentUser = null;\r\n    if(this.usernameTextboxValue != undefined){\r\n    this.currentUser = {\r\n      \"token\": localStorage.getItem('token'),\r\n      \"username\": this.usernameTextboxValue\r\n    }\r\n    this.api.updateUsername(this.currentUser).subscribe( data => {\r\n      this.currentUserObject['username'] = data['username'];\r\n    })\r\n  }\r\n  else{console.log(\"No value provided\")}\r\n  }\r\n\r\n  error_messages = {\r\n    'username': [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'email', message: 'Invalid email format.' }\r\n    ],\r\n    'name': [\r\n      { type: 'required', message: 'Full name is required.' },\r\n      { type: 'pattern', message: 'Name can only consist of letters' }\r\n    ]\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    if(!localStorage.getItem('token')){\r\n      this.router.navigate(['/index']);\r\n      alert(\"You are not logged in\");\r\n    }\r\n\r\n    this.currentUser = {\r\n      \"token\": localStorage.getItem('token')\r\n    }\r\n\r\n    this.api.getUser(this.currentUser).subscribe( data => {\r\n      this.currentUserObject = data;\r\n\r\n      this.updateNameForm = this.formBuilder.group({\r\n        name: [data['name'], [Validators.required, Validators.pattern('[a-zA-Z ]*')]]\r\n      });\r\n\r\n      this.updateUsernameForm = this.formBuilder.group({\r\n        username: [data['username'], [Validators.required, Validators.email]]\r\n      });\r\n    });\r\n  }\r\n\r\n}\r\n","<img src=\"assets/images/logo.jpg\">\r\n<app-navbar></app-navbar>\r\n<!--app-navbar-profile></app-navbar-profile-->\r\n\r\n\r\n<div class=\"container-fluid\" >\r\n    <mat-card class=\"profile\">\r\n        <mat-card-header>\r\n            <h1>Profile</h1>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n        <div><img src=\"assets/images/profile.jpg\" id=\"profileImage\"></div>\r\n        <div *ngIf=\"currentUserObject\">\r\n            <form [formGroup]=\"updateNameForm\" (ngSubmit)=\"updateName()\">\r\n                <mat-form-field appearance=\"fill\">\r\n                    <input matInput formControlName=\"name\"  value=\"{{currentUserObject.name}}\" (input)=\"nameTextboxValue=$event.target.value\">\r\n                </mat-form-field>\r\n                <div>\r\n                    <ng-container *ngFor=\"let error of error_messages.name\">\r\n                        <mat-error class=\"error-message\" *ngIf=\"updateNameForm.get('name').hasError(error.type) && (updateNameForm.get('name').dirty || updateNameForm.get('name').touched)\">\r\n                            {{ error.message }}\r\n                        </mat-error>\r\n                    </ng-container>\r\n                </div>\r\n                <button mat-raised-button type=\"submit\" [disabled]=\"!updateNameForm.valid\" class=\"btns\" >Save</button>\r\n            </form>\r\n\r\n            <form [formGroup]=\"updateUsernameForm\" (ngSubmit)=\"updateUsername()\">\r\n                <mat-form-field appearance=\"fill\">\r\n                    <input matInput formControlName=\"username\"  value=\"{{currentUserObject.username}}\" (input)=\"usernameTextboxValue=$event.target.value\">\r\n                </mat-form-field>\r\n                <div>\r\n                    <ng-container *ngFor=\"let error of error_messages.username\">\r\n                        <mat-error class=\"error-message\" *ngIf=\"updateUsernameForm.get('username').hasError(error.type) && (updateUsernameForm.get('username').dirty || updateUsernameForm.get('username').touched)\">\r\n                            {{ error.message }}\r\n                        </mat-error>\r\n                    </ng-container>\r\n                </div>\r\n                <button mat-raised-button type=\"submit\" [disabled]=\"!updateUsernameForm.valid\" class=\"btns\">Save</button>\r\n            </form>\r\n        </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>\r\n","export class RatingsArr{\r\n  id: number;\r\n  rating: number;\r\n  puzzleID: number;\r\n}\r\n","export class PuzzleArr{\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  creator: string;\r\n  rating: string;\r\n  created: any;\r\n  showRating: boolean;\r\n  image: any; \r\n}\r\n","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { APIService } from 'src/app/services/api.service';\r\nimport { User } from 'src/app/models/user';\r\nimport { Router } from '@angular/router';\r\nimport { PuzzleArr } from './puzzleArr';\r\nimport { RatingsArr } from './RatingsArr';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { RateDialogComponent } from '../../rate-dialog/rate-dialog.component';\r\nimport { PuzzleRating } from 'src/app/models/PuzzleRating';\r\n\r\n@Component({\r\n  selector: 'app-ratings',\r\n  templateUrl: './ratings.component.html',\r\n  styleUrls: ['./ratings.component.css']\r\n})\r\nexport class RatingsComponent implements OnInit {\r\n\r\n  rateDialogRef: MatDialogRef<RateDialogComponent>;\r\n  puzzles: Array<PuzzleArr> = [];\r\n  name: string;\r\n  ratings: Array<RatingsArr> = [];\r\n  ratePID: number;\r\n  rateUID: string;\r\n  ratingEntry: any;\r\n  formError: string;\r\n  show: boolean;\r\n  dataAvailable: boolean;\r\n  //searchbar\r\n  searchTextboxValue: string;\r\n  token: any;\r\n  currentUser: any;\r\n\r\n  constructor(private api: APIService, private cdr: ChangeDetectorRef, private dialog: MatDialog, private router: Router) {\r\n  }\r\n\r\n  populate(populatePuz: any)\r\n  {\r\n    this.ratings.length = 0;\r\n    this.api.getAllPuzzleRatings().subscribe(\r\n      data=> {\r\n        for(let i=0; data[i]!= null; i++){\r\n          let ratingObj = new RatingsArr();\r\n          ratingObj.id = data[i].id;\r\n          ratingObj.rating = data[i].rating;\r\n          ratingObj.puzzleID = data[i].puzzleID;\r\n          this.ratings.push(ratingObj);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(\"Error from API: \", error.error);\r\n      });\r\n\r\n\r\n    if (populatePuz != null)\r\n    {\r\n      this.getPuzzles(populatePuz);\r\n    }\r\n    else\r\n    {\r\n      this.api.getAllPuzzles().subscribe(\r\n        data => {\r\n          this.getPuzzles(data);\r\n      },\r\n        error => {//if status code other than in the 200 range returned, show error\r\n          console.log('Error from API: ', error.error);\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n  searchItems(searchValue: any){\r\n    if(searchValue != undefined){\r\n      this.api.getSearchedPuzzles(searchValue).subscribe( data => {\r\n        var dataObjectSize = Object.keys(data).length;\r\n        if(dataObjectSize == 0 )\r\n        {\r\n          alert(\"Nothing matches given criteria\");\r\n          console.log(\"Nothing matches given criteria\");\r\n        }\r\n        else{\r\n          //Please populate the page with the data received. Other puzzles not fromd data must be cleared\r\n          console.log(data);\r\n          this.populate(data);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getPuzzles(data: any){\r\n    this.puzzles.length = 0;\r\n    for(let i=0; data[i]!=null; i++)\r\n    {\r\n      let puzzleObj = new PuzzleArr();\r\n      puzzleObj.id = data[i].id;\r\n      puzzleObj.name = data[i].name;\r\n      puzzleObj.description = data[i].description;\r\n      puzzleObj.creator = data[i].creator;\r\n      puzzleObj.created = data[i].createdAt;\r\n      puzzleObj.image = data[i].image; \r\n      if (puzzleObj.creator== this.currentUser[\"name\"])\r\n      {\r\n        puzzleObj.showRating = false;\r\n      }\r\n      else\r\n      {\r\n        puzzleObj.showRating = true;\r\n      }\r\n\r\n      let j = 0;\r\n      let total = 0;\r\n\r\n      for (let k=0; this.ratings[k]!=null; k++){\r\n        if (this.ratings[k].puzzleID == data[i].id)\r\n        {\r\n          //********* ERROR HERE - THIS LOOP IS NOT ENTERED WHEN THE RATINGS VALUE IS 0  ************\r\n          console.log(this.ratings[k]);\r\n          total = total + this.ratings[k].rating;\r\n          j = j+1;\r\n        }\r\n      }\r\n\r\n      if (j == 0){\r\n        puzzleObj.rating = (0).toString();\r\n      }\r\n      else{\r\n        puzzleObj.rating = (total/j).toFixed(2);\r\n      }\r\n      this.puzzles.push(puzzleObj);\r\n    }\r\n\r\n    this.dataAvailable = true;\r\n    this.show= false;\r\n\r\n  }\r\n\r\n  checkData(data: any){\r\n    this.ratePID = data;\r\n    //this.rateUID = localStorage.getItem('token');\r\n    //this.rateUID = localStorage.getItem('id');\r\n    //console.log(localStorage.getItem('id'));\r\n  }\r\n\r\n  openRateDialog(){\r\n    this.rateDialogRef = this.dialog.open(RateDialogComponent);\r\n\r\n    this.rateDialogRef.afterClosed().subscribe( result => {\r\n      //console.log(result);\r\n      //console.log(this.ratePID);\r\n      //console.log(this.rateUID);\r\n\r\n      if (result != \"\"){\r\n\r\n        this.ratingEntry = {\r\n        //\"id\":this.rateUID,\r\n          \"puzzleID\":this.ratePID,\r\n          \"rating\":result,\r\n          \"token\": localStorage.getItem('token')\r\n        }\r\n\r\n        console.log(this.ratingEntry);\r\n\r\n        if(this.api.createNewPuzzleRating(this.ratingEntry).subscribe())\r\n        {\r\n          alert(\"Rating added\");\r\n        }\r\n\r\n        location.reload();\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  openAndCheck(rateP: any){\r\n    this.checkData(rateP);\r\n    this.openRateDialog();\r\n  }\r\n\r\n  reload(){\r\n    this.populate(null);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.show=true;\r\n    this.dataAvailable = false;\r\n    if(!localStorage.getItem('token')){\r\n      this.router.navigate(['/index']);\r\n      alert(\"You are not logged in\");\r\n    }\r\n\r\n    this.currentUser = {\r\n      \"token\": localStorage.getItem('token')\r\n    }\r\n\r\n    this.api.getUser(this.currentUser).subscribe( data => {\r\n      console.log(data[\"name\"]);\r\n      this.currentUser = {\r\n        \"token\": localStorage.getItem('token'),\r\n        \"name\": data[\"name\"]\r\n      }\r\n    });\r\n\r\n    this.populate(null);\r\n  }\r\n\r\n}\r\n","<img src=\"assets/images/logo.jpg\">\r\n<app-navbar></app-navbar>\r\n\r\n<mat-form-field class=\"example-form-field\">\r\n    <mat-label>Search</mat-label>\r\n    <input matInput type=\"text\" (input)=\"searchTextboxValue=$event.target.value\">\r\n    <button mat-button matSuffix (click)=\"searchItems(searchTextboxValue)\">\r\n      <mat-icon>search</mat-icon>\r\n    </button>\r\n</mat-form-field>\r\n<button mat-button id=\"resetBtn\" class=\"btns\" (click)=\"reload()\">Reset Search Criteria</button>\r\n\r\n<mat-spinner *ngIf=\"show\" id=\"spinner\"></mat-spinner>\r\n\r\n<div class=\"container\">\r\n<div class=\"container-fluid\" *ngIf=\"dataAvailable\" >\r\n  <h1 class=\"main-title\"><strong>LET'S PLAY</strong></h1>\r\n    <div class=\"flex-container\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\">\r\n        <mat-card div class=\"content\" *ngFor=\"let puzzle of puzzles\">\r\n          <div class=\"content-overlay\"></div>\r\n          <img class=\"content-image\" src=\"{{puzzle.image}}\">\r\n            <mat-card-header>\r\n                <mat-card-title>{{puzzle.name}}</mat-card-title>\r\n                <mat-card-subtitle>Created by {{puzzle.creator}}</mat-card-subtitle>\r\n                <mat-card-subtitle>Rating: {{puzzle.rating}}/5</mat-card-subtitle>\r\n                <mat-card-subtitle>Date: {{puzzle.created}}</mat-card-subtitle>\r\n                <mat-card-subtitle>Description: {{puzzle.description}}</mat-card-subtitle>\r\n            </mat-card-header>\r\n            <div class=\"content-details fadeIn-bottom\">\r\n                <h3 class=\"content-title\">{{puzzle.name}}</h3>\r\n                <button mat-button class=\"btns\">SOLVE</button>\r\n                <button *ngIf=\"puzzle.showRating\" mat-button class=\"btns\" (click)=\"openAndCheck(puzzle.id)\">RATE</button>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { APIService } from 'src/app/services/api.service';\r\nimport { User } from 'src/app/models/user';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.css']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  resetPasswordForm: FormGroup;\r\n  verifyUser: any;\r\n  formError: string;\r\n  resetDone: string;\r\n\r\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router ) {}\r\n\r\n  //method for logging in user and getting the token associated with the said user\r\n  resetPassword(currentUser: User){\r\n    this.resetDone = '';\r\n    this.formError = '';\r\n    if(this.doPasswordsMatch(this.resetPasswordForm.controls['password'].value, this.resetPasswordForm.controls['confirmPassword'].value) == true){\r\n      this.verifyUser = {\r\n        \"username\": currentUser.email,\r\n        \"password\": currentUser.password\r\n      }\r\n      if(this.verifyUser != null){\r\n        this.api.resetPassword(this.verifyUser).subscribe(\r\n          () => {},\r\n          error => {//if status code other than in the 200 range returned, show error\r\n            if(error.status >= 401){\r\n              this.formError = error.error;\r\n            }\r\n            else\r\n            {\r\n              this.router.navigate(['/resetSuccess', { message: \"Password reset. Please login\" }]);\r\n            }\r\n          })\r\n      }\r\n    }\r\n    else\r\n    {\r\n      this.formError = \"Passwords do not match\";\r\n    }\r\n  }\r\n\r\n  //error messages used during login/register validation\r\n  error_messages = {\r\n    'email': [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'email', message: 'Invalid email format.' }\r\n    ],\r\n    'password': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\r\n    ],\r\n    'confirmPassword': [\r\n      { type: 'required', message: 'password is required.' },\r\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\r\n    ],\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.resetPasswordForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  //checking if passwords match\r\n  doPasswordsMatch(firstPassword: string, secondPassword: string) {\r\n    if (firstPassword !== secondPassword) {\r\n        return false;\r\n    } else {\r\n      return true;\r\n    }\r\n}\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\r\n        <mat-card class=\"regForm\">\r\n          <mat-card-header>\r\n              <h1>Reset Password</h1>\r\n          </mat-card-header>\r\n            <mat-card-content class=\"regFormContent\">\r\n                <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword(resetPasswordForm.value)\">\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Enter your email</mat-label>\r\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.email\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('email').hasError(error.type) && (resetPasswordForm.get('email').dirty || resetPasswordForm.get('email').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Enter your password</mat-label>\r\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.password\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('password').hasError(error.type) && (resetPasswordForm.get('password').dirty || resetPasswordForm.get('password').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <mat-form-field appearance=\"fill\">\r\n                            <mat-label>Confirm password</mat-label>\r\n                            <input class=\"input\" matInput  required formControlName=\"confirmPassword\" type=\"password\">\r\n                        </mat-form-field>\r\n                            <div>\r\n                                <ng-container *ngFor=\"let error of error_messages.confirmPassword\">\r\n                                    <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('confirmPassword').hasError(error.type) && (resetPasswordForm.get('confirmPassword').dirty || resetPasswordForm.get('confirmPassword').touched)\">\r\n                                        {{ error.message }}\r\n                                    </mat-error>\r\n                                </ng-container>\r\n                                <span id=\"passError\">{{formError}}</span>\r\n                            </div>\r\n                    </div>\r\n\r\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!resetPasswordForm.valid\" class=\"btns\" id=\"one\">Submit</button>\r\n                    <a routerLink=\"/index\" mat-raised-button class=\"btns\" id=\"two\">Cancel</a>\r\n                </form>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-reset-success',\r\n  templateUrl: './reset-success.component.html',\r\n  styleUrls: ['./reset-success.component.css']\r\n})\r\nexport class ResetSuccessComponent implements OnInit {\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router ) {}\r\n\r\n  ngOnInit() {\r\n\r\n    let message = this.route.snapshot.paramMap.get('message');\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\r\n        <mat-card class=\"regForm\">\r\n            <mat-card-header>\r\n                <mat-card-title class=\"cardTitle\">Reset Password Successfully</mat-card-title>\r\n            </mat-card-header>\r\n            <mat-card-content class=\"regFormContent\">\r\n                    <p>Please login</p>\r\n                    <a routerLink=\"/login\" mat-raised-button class=\"btns\" id=\"two\">Login</a>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { User } from '../../models/user';\r\nimport { APIService } from '../../services/api.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  signUpForm: FormGroup;\r\n  newUser: any;\r\n  formError: string;\r\n\r\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router) {}\r\n\r\n  //method for creating a new user. A new JSON object is created and sent to the node api\r\n  createNewUser(createUser: any){\r\n    this.formError = '';\r\n    if(this.doPasswordsMatch(this.signUpForm.controls['password'].value, this.signUpForm.controls['confirmPassword'].value) == true){\r\n      this.newUser = {\r\n        \"name\": createUser.name,\r\n        \"username\": createUser.email,\r\n        \"password\": createUser.password\r\n      }\r\n      if(this.newUser != null){\r\n        this.api.createUser(this.newUser).subscribe(\r\n          data => {console.log(data);\r\n              this.router.navigate(['/login']);\r\n            },\r\n          error => {//if status code other than in the 200 range returned, show error\r\n            console.log('Error from API: ', error.error);\r\n            if(error.status >= 401){\r\n              this.formError = error.error;\r\n            }\r\n          })\r\n      }\r\n    }\r\n    else\r\n    {\r\n      this.formError = \"Passwords do not match\";\r\n    }\r\n  }\r\n\r\n  //error messages used during login/register validation\r\n  error_messages = {\r\n    'name': [\r\n      { type: 'required', message: 'Full name is required.' },\r\n      { type: 'pattern', message: 'Name can only consist of letters' }\r\n    ],\r\n    'email': [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'email', message: 'Invalid email format.' }\r\n    ],\r\n    'password': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\r\n    ],\r\n    'confirmPassword': [\r\n      { type: 'required', message: 'password is required.' },\r\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\r\n    ],\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.signUpForm = this.formBuilder.group({\r\n      name: ['', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  //checking if passwords match\r\n  doPasswordsMatch(firstPassword: string, secondPassword: string) {\r\n        if (firstPassword !== secondPassword) {\r\n          //this.formError = \"Passwords do not match: \" + controlName + \" \" + matchingControlName;\r\n            return false;\r\n        } else {\r\n          //this.formError = \"Match: \" + controlName + \" \" + matchingControlName;\r\n          return true;\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\r\n        <mat-card class=\"regForm\">\r\n            <mat-card-header>\r\n                <h1>Sign Up</h1>\r\n            </mat-card-header>\r\n            <mat-card-content class=\"regFormContent\">\r\n                <form [formGroup]=\"signUpForm\" (ngSubmit)=\"createNewUser(signUpForm.value)\">\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Enter your full name</mat-label>\r\n                        <input class=\"input\" matInput placeholder=\"John Doe\" formControlName=\"name\" required >\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.name\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('name').hasError(error.type) && (signUpForm.get('name').dirty || signUpForm.get('name').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Enter your email</mat-label>\r\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.email\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('email').hasError(error.type) && (signUpForm.get('email').dirty || signUpForm.get('email').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Enter your password</mat-label>\r\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.password\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('password').hasError(error.type) && (signUpForm.get('password').dirty || signUpForm.get('password').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                    <mat-form-field appearance=\"fill\">\r\n                        <mat-label>Confirm password</mat-label>\r\n                        <input class=\"input\" matInput  required formControlName=\"confirmPassword\" type=\"password\">\r\n                    </mat-form-field>\r\n                        <div>\r\n                            <ng-container *ngFor=\"let error of error_messages.confirmPassword\">\r\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('confirmPassword').hasError(error.type) && (signUpForm.get('confirmPassword').dirty || signUpForm.get('confirmPassword').touched)\">\r\n                                    {{ error.message }}\r\n                                </mat-error>\r\n                            </ng-container>\r\n                            <span id=\"passError\">{{formError}}</span>\r\n                        </div>\r\n                    </div>\r\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!signUpForm.valid\" class=\"btn\" id=\"one\">Sign Up</button>\r\n\r\n                    <a routerLink=\"/index\" mat-raised-button color=\"accent\" class=\"btns\">Cancel</a>\r\n                </form>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-rate-dialog',\r\n  templateUrl: './rate-dialog.component.html',\r\n  styleUrls: ['./rate-dialog.component.css']\r\n})\r\nexport class RateDialogComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private dialogRef: MatDialogRef<RateDialogComponent>) { }\r\n\r\n    error_messages = {\r\n      'rating': [\r\n        { type: 'pattern', message: 'Number must be between 1 and 5' }\r\n      ]\r\n    }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      rating: ['', Validators.pattern(\"[1-5]\")]\r\n    })\r\n  }\r\n\r\n  submit(form){\r\n    this.dialogRef.close(`${form.rating}`);\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit(form.value)\">\r\n  <h1 mat-dialog-title>Rate Puzzle (out of 5)</h1>\r\n  <mat-dialog-content>\r\n    <mat-form-field>\r\n      <input matInput type=\"number\" min=\"1\" max=\"5\" formControlName=\"rating\" placeholder=\"Enter Rating\" ngControl=\"rating\">\r\n    </mat-form-field>\r\n    <div>\r\n        <ng-container *ngFor=\"let error of error_messages.rating\">\r\n            <mat-error class=\"error-message\" *ngIf=\"form.get('rating').hasError(error.type) && (form.get('rating').dirty || form.get('rating').touched)\">\r\n                {{ error.message }}\r\n            </mat-error>\r\n        </ng-container>\r\n    </div>\r\n\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions>\r\n    <button mat-button type=\"submit\" [disabled]=\"!form.valid\">Submit</button>\r\n    <button mat-button type=\"button\" mat-dialog-close>Cancel</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { User } from '../models/user';\r\nimport { Puzzle } from '../models/Puzzle';\r\nimport { PuzzleRating } from '../models/PuzzleRating';\r\nimport {HttpHeaders} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class APIService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * User endpoints start here\r\n   */\r\n  //create new user\r\n  createUser(newUser: User){\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json'} ) };\r\n    return this.http.post('http://localhost:3200/api/users/createUser',newUser, httpOptions);\r\n  }\r\n\r\n  loginUser(currentUser: User){\r\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n    return this.http.post('http://localhost:3200/api/users/login', currentUser, httpOptions);\r\n  }\r\n\r\n  resetPassword(currentUser: User){\r\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n    return this.http.put('http://localhost:3200/api/users/resetPassword', currentUser, httpOptions);\r\n  }\r\n\r\n  getUser(token: any){\r\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json'} ) };\r\n    return this.http.post('http://localhost:3200/api/users/getUser',token, httpOptions);\r\n  }\r\n\r\n  updateName(currentUser: User){\r\n    console.log(\"---------\");\r\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n    return this.http.put('http://localhost:3200/api/users/updateName', currentUser, httpOptions);\r\n  }\r\n\r\n  updateUsername(currentUser: User){\r\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n    return this.http.put('http://localhost:3200/api/users/updateUsername', currentUser, httpOptions);\r\n  }\r\n\r\n  getPuzzlesByUser(token: any): Observable<any[]> {\r\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n    return this.http.post<any[]>('http://localhost:3200/api/users/getPuzzlesByUser', token, httpOptions);\r\n  }\r\n\r\n  getPuzzleRatingsByUser(token: any): Observable<any[]>{\r\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n    return this.http.post<any[]>('http://localhost:3200/api/users/getPuzzleRatingsByUser', token, httpOptions);\r\n  }\r\n\r\n  /**\r\n   * User endpoints end here\r\n   */\r\n\r\n\r\n/**\r\n* Puzzle endpoints start here\r\n*/\r\ngetAllPuzzles(){\r\n  return this.http.get('http://localhost:3200/api/puzzles/getAllPuzzles');\r\n}\r\n\r\ngetAllPuzzleByID(puzzleID: number){\r\n  return this.http.get('http://localhost:3200/api/puzzles/getPuzzleByID?Id=' + puzzleID);\r\n}\r\n\r\ncreateNewPuzzle(puzzle: Puzzle){\r\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n  return this.http.post('http://localhost:3200/api/puzzles/createPuzzle', puzzle, httpOptions);\r\n}\r\n\r\ncreateNewPuzzleRating(rating: PuzzleRating){\r\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n  return this.http.post('http://localhost:3200/api/puzzles/createPuzzleRating', rating, httpOptions);\r\n}\r\n\r\ngetAllPuzzleRatings(){\r\n  return this.http.get('http://localhost:3200/api/puzzles/getAllPuzzleRatings');\r\n}\r\n\r\ngetSearchedPuzzles(term: any){\r\n  return this.http.get('http://localhost:3200/api/puzzles/getSearchedPuzzles/' + term);\r\n}\r\n\r\nsharePuzzle(puzzle: any){\r\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n  return this.http.put('http://localhost:3200/api/puzzles/sharePuzzle', puzzle, httpOptions);\r\n}\r\n\r\nstopSharingPuzzle(puzzle: any){\r\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\r\n  return this.http.put('http://localhost:3200/api/puzzles/stopSharingPuzzle', puzzle, httpOptions);\r\n}\r\n\r\n/**\r\n* Puzzle endpoints end here\r\n*/\r\n}\r\n","import Konva from 'konva';\r\n\r\nfunction everything() {\r\n\tlet apiURL = \"http://localhost:3200/api/puzzles/createPuzzle\";\r\n\r\nlet distanceMetric = 'euclidean';\r\nfunction setDistanceMetric(metric)\r\n{\r\n\tdistanceMetric = metric;\r\n}\r\n\r\nwindow.onload = function() {\r\n\tlet puzzleImage;\r\n\tlet canvas = document.getElementById('container');\r\n\tlet canvasCoords = canvas.getBoundingClientRect();\r\n\tlet width = canvas.offsetWidth;\r\n\tlet height = canvas.offsetHeight;\r\n\tlet sites = [];\r\n\tlet siteBoundaries = [];\r\n\tlet precision = 0;\r\n\tlet colors = ['Plum', 'Tomato', 'Orange', 'Violet', 'Gray', 'MediumSeaGreen', 'LightGray', 'SlateBlue', 'Brown', 'Aquamarine', 'AntiqueWhite'];\r\n\tlet generateButtonClicked = false;\r\n\t//let token = 'KQlH2g5Io_AwCwotB4TUC';\r\n\tlet piecesJSONObject = {\r\n\t\t'pieces' : []\r\n\t};\r\n\r\n\tlet stage = new Konva.Stage({\r\n\t\tcontainer: 'container',\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t});\r\n\r\n\tlet layer = new Konva.Layer();\r\n\r\n\tlet square = new Konva.Rect({\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tstroke: 'black',\r\n\t\tstrokeWidth: 2,\r\n\r\n\t});\r\n\r\n\tlayer.add(square);\r\n\tstage.add(layer);\r\n\r\n\tcanvas.addEventListener('mousedown', function(event){\r\n\t\tif(!generateButtonClicked)\r\n\t\t{\r\n\t\t\tlet x = event.clientX - canvasCoords.x;\r\n\t\t\tlet y = event.clientY - canvasCoords.y;\r\n\t\t\tlet point = createPoint(x, y);\r\n\t\t\tsites.push({\r\n\t\t\t\tx: point.x(),\r\n\t\t\t\ty: point.y(),\r\n\t\t\t\tid: sites.length,\r\n\t\t\t});\r\n\r\n\t\t\tlayer.add(point);\r\n\t\t\tlayer.draw();\r\n\t\t\tconsole.log(\"X: \" + x + \" Y: \" + y);\r\n\t\t}\r\n\t});\r\n\r\n\tfunction createPoint(x, y)\r\n\t{\r\n\t\tlet point = new Konva.Circle({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\tradius: 1,\r\n\t\t\tstroke: 'black',\r\n\t\t\tstrokeWidth: 2,\r\n\t\t});\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\tdocument.getElementById('generatePuzzleButton').addEventListener('mousedown', generatePuzzle);\r\n\t\r\n\tdocument.getElementById('euclideanButton').addEventListener('mousedown', function(){\r\n\t\tsetDistanceMetric('euclidean');\r\n\t});\r\n\r\n\tdocument.getElementById('manhattanButton').addEventListener('mousedown', function(){\r\n\t\tsetDistanceMetric('manhattan');\r\n\t});\r\n\r\n\t// = token;\r\n\t\r\n\tdocument.getElementById('saveButton').addEventListener('mousedown', function() {\r\n\t\tlet token = document.getElementById('tokenLabel').innerHTML;\r\n\t\tlet puzzleName = document.getElementById('puzzleNameInputBox').value;\r\n\t\tlet puzzleDescription = document.getElementById('puzzleDescriptionInputBox').value;\r\n\r\n\t\tlet puzzleImage = stage.toDataURL({ pixelRatio: 0.25 });\r\n\r\n\t\tlet jsonData = {\r\n\t\t\ttoken: token,\r\n\t\t\tname: puzzleName,\r\n\t\t\tdescription: puzzleDescription,\r\n\t\t\tpuzzleObject: piecesJSONObject,\r\n\t\t\timage: puzzleImage,\r\n\t\t\tshared: false\r\n\t\t};\r\n\r\n\t\t$.ajax({\r\n\t\t\ttype: 'POST',\r\n\t\t\turl: apiURL,\r\n\t\t\theaders: { \r\n\t\t\t\t'Access-Control-Allow-Origin' : '*' \r\n\t\t\t},\r\n\t\t\tcontentType: 'application/json',\r\n\t\t\tdata: JSON.stringify(jsonData),\r\n\t\t\tdataType: 'json',\r\n\t\t\tsuccess: function(data, status) {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tconsole.log(status);\r\n\t\t\t},\r\n\t\t\terror: function(data, status) {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tconsole.log(status);\t\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tdocument.getElementById('saveAndSubmitButton').addEventListener('mousedown', function(){\r\n\t\tlet puzzleImage = stage.toDataURL({ pixelRatio: 0.25 });\r\n\t\tdocument.getElementById('testingImg').src = puzzleImage;\r\n\t});\r\n\r\n\tfunction generatePuzzle()\r\n\t{\r\n\t\tgenerateButtonClicked = true;\r\n\t\tgenerateSiteBoundaries();\r\n\t\tcreatePieces();\r\n\t}\r\n\r\n\tfunction createPieces()\r\n\t{\r\n\t\tlet colorCount = colors.length;\r\n\t\tfor(let i = 0; i < sites.length; i++)\r\n\t\t{\r\n\t\t\tlet trimmedPoints = trimPoints(siteBoundaries[i]);\r\n\t\t\tlet piece = new Konva.Line({\r\n\t\t\t\t// points: siteBoundaries[i],\r\n\t\t\t\tpoints: trimmedPoints,\r\n\t\t\t\tstroke: colors[i % colorCount],\r\n\t\t\t\tstrokeWidth: 1,\r\n\t\t\t\tdraggable: true\r\n\t\t\t});\r\n\r\n\t\t\tpiece.on('mouseover', function (){\r\n\t\t\t\tdocument.body.style.cursor = 'pointer';\r\n\t\t\t});\r\n\r\n\t\t\tpiece.on('mouseout', function() {\r\n\t\t\t\tdocument.body.style.cursor = 'default';\r\n\t\t\t});\r\n\r\n\t\t\tpiecesJSONObject.pieces.push(trimmedPoints);\r\n\t\t\tlayer.add(piece);\r\n\t\t}\r\n\t\tlayer.draw();\r\n\t\tpiecesJSONObject = JSON.stringify(piecesJSONObject);\r\n\t\t// console.log(piecesJSONObject);\r\n\t}\r\n\r\n\tfunction trimPoints(pointArray)\r\n\t{\r\n\t\tlet trimmedPoints = [];\r\n\t\tlet lastPointCol;\r\n\t\tlet firstPointCol = pointArray[0];\r\n\t\tlet currentRow = pointArray[1];\r\n\r\n\t\ttrimmedPoints.push(firstPointCol, currentRow);\r\n\r\n\t\tfor(let index = 0; index < pointArray.length; index+=2)\r\n\t\t{\r\n\t\t\tif(currentRow != pointArray[index+1])\r\n\t\t\t{\r\n\t\t\t\ttrimmedPoints.push(lastPointCol, currentRow);\r\n\t\t\t\tcurrentRow = pointArray[index+1];\r\n\t\t\t\tfirstPointCol = pointArray[index];\r\n\t\t\t\ttrimmedPoints.push(firstPointCol, currentRow);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlastPointCol = pointArray[index];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn trimmedPoints;\r\n\t}\r\n\r\n\tfunction generateSiteBoundaries()\r\n\t{\r\n\t\tfor(let i = 0; i < sites.length; i++)\r\n\t\t\tsiteBoundaries[i] = [];\r\n\r\n\t\tfor(let row = 0; row < height; row++)\r\n\t\t{\r\n\t\t\tfor(let col = 0; col < width; col++)\r\n\t\t\t{\r\n\t\t\t\tlet distances = calculateDistancesFromSitesToPoint(col, row, sites);\r\n\t\t\t\tlet equidistantPoints = equidistantPointsPresent(distances);\r\n\r\n\t\t\t\tsiteBoundaries[equidistantPoints[0]].push(col);\r\n\t\t\t\tsiteBoundaries[equidistantPoints[0]].push(row);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction equidistantPointsPresent(distances)\r\n\t{\r\n\t\tlet returnArray = [];\r\n\t\tlet minimumDistance = Math.min(...distances);\r\n\r\n\t\tif(distanceMetric === 'euclidean')\r\n\t\t\tminimumDistance = minimumDistance.toFixed(precision) + '';\r\n\r\n\t\tlet index = 0, counter = 0;\r\n\r\n\t\twhile(index != -1)\r\n\t\t{\r\n\t\t\tindex = distances.indexOf(minimumDistance);\r\n\t\t\tif(index != -1)\r\n\t\t\t{\r\n\t\t\t\treturnArray.push(index+counter);\r\n\t\t\t\tdistances.splice(index, 1);\r\n\t\t\t\tcounter++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn returnArray;\r\n\t}\r\n\r\n\tfunction calculateDistancesFromSitesToPoint(xOfPoint, yOfPoint, sitePoints)\r\n\t{\r\n\t\tlet result = [];\r\n\t\tif(distanceMetric === 'euclidean')\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < sitePoints.length; i++)\r\n\t\t\t\tresult.push(calculateEuclideanDistance(xOfPoint, yOfPoint, sitePoints[i].x, sitePoints[i].y));\r\n\t\t}\r\n\t\telse if(distanceMetric === 'manhattan')\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < sitePoints.length; i++)\r\n\t\t\t\tresult.push(calculateManhattanDistance(xOfPoint, yOfPoint, sitePoints[i].x, sitePoints[i].y));\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction calculateEuclideanDistance(point1X, point1Y, point2X, point2Y)\r\n\t{\r\n\t\tlet result = Math.pow( Math.pow( point1X - point2X, 2 ) + Math.pow( point1Y - point2Y, 2 ), 0.5 );\r\n\t\treturn result.toFixed(precision);\r\n\t}\r\n\r\n\r\n\tfunction calculateManhattanDistance(point1X, point1Y, point2X, point2Y)\r\n\t{\r\n\t\tlet resultX = point1X - point2X;\r\n\t\tif(resultX < 0)\r\n\t\t\tresultX *= -1;\r\n\t\tlet resultY = point1Y - point2Y;\r\n\t\tif(resultY < 0)\r\n\t\t\tresultY *= -1;\r\n\t\tlet result = resultX + resultY;\r\n\t\treturn result;\r\n\t}\r\n}\r\n}\r\n\r\nvar createModule = new everything();\r\n\r\nexport { createModule };","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}