{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/app/pages/create/create.component.ts","webpack:///src/app/pages/create/create.component.html","webpack:///src/app/pages/index/index.component.ts","webpack:///src/app/pages/index/index.component.html","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.component.html","webpack:///src/app/pages/profile/profile.component.ts","webpack:///src/app/pages/profile/profile.component.html","webpack:///src/app/pages/rate-form/rate-form.component.ts","webpack:///src/app/pages/rate-form/rate-form.component.html","webpack:///src/app/pages/ratings/RatingsArr.ts","webpack:///src/app/pages/ratings/puzzleArr.ts","webpack:///src/app/pages/ratings/ratings.component.ts","webpack:///src/app/pages/ratings/ratings.component.html","webpack:///src/app/pages/reset-password/reset-password.component.ts","webpack:///src/app/pages/reset-password/reset-password.component.html","webpack:///src/app/pages/reset-success/reset-success.component.ts","webpack:///src/app/pages/reset-success/reset-success.component.html","webpack:///src/app/pages/signup/signup.component.ts","webpack:///src/app/pages/signup/signup.component.html","webpack:///src/app/services/api.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","NavbarComponent","name","localStorage","getItem","CreateComponent","IndexComponent","LoginComponent","formBuilder","api","router","error_messages","type","message","currentUser","formError","verifyUser","email","password","loginUser","subscribe","data","console","log","removeItem","setItem","navigate","error","status","loginForm","group","required","minLength","ProfileComponent","activatedRoute","route","nameTextboxValue","undefined","token","updateName","currentUserObject","usernameTextboxValue","updateUsername","puzzleList","getPuzzlesByUser","getUser","updateNameForm","pattern","updateUsernameForm","username","getUserPuzzles","RateFormComponent","RatingsArr","PuzzleArr","RatingsComponent","puzzles","ratings","getAllPuzzleRatings","i","ratingObj","rating","puzzleID","push","getAllPuzzles","puzzleObj","description","creator","j","total","k","searchValue","getSearchedPuzzles","dataObjectSize","Object","length","populate","searchItems","ResetPasswordComponent","resetDone","doPasswordsMatch","resetPasswordForm","controls","value","resetPassword","confirmPassword","firstPassword","secondPassword","ResetSuccessComponent","snapshot","paramMap","get","SignupComponent","createUser","signUpForm","newUser","createNewUser","APIService","http","httpOptions","headers","post","put","puzzle","term","providedIn","environment","production","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAaA,QAAMC,MAAM,GAAW,CACrB;AAACC,UAAI,EAAE,OAAP;AAAgBC,eAAS,EAAE;AAA3B,KADqB,EAErB;AAACD,UAAI,EAAE,QAAP;AAAiBC,eAAS,EAAE;AAA5B,KAFqB,EAGrB;AAACD,UAAI,EAAE,OAAP;AAAgBC,eAAS,EAAE;AAA3B,KAHqB,EAIrB;AAACD,UAAI,EAAE,SAAP;AAAkBC,eAAS,EAAE;AAA7B,KAJqB,EAKrB;AAACD,UAAI,EAAE,SAAP;AAAkBC,eAAS,EAAE;AAA7B,KALqB,EAMrB;AAACD,UAAI,EAAE,eAAP;AAAwBC,eAAS,EAAE;AAAnC,KANqB,EAOrB;AAACD,UAAI,EAAE,cAAP;AAAuBC,eAAS,EAAE;AAAlC,KAPqB,EAQrB;AAACD,UAAI,EAAE,UAAP;AAAmBC,eAAS,EAAE;AAA9B,KARqB,EASrB;AAACD,UAAI,EAAE,QAAP;AAAiBC,eAAS,EAAE;AAA5B,KATqB,EAWnB;AACF;AAAED,UAAI,EAAE,EAAR;AAAYE,gBAAU,EAAE,QAAxB;AAAkCC,eAAS,EAAE;AAA7C,KAZqB,EAarB;AAAEH,UAAI,EAAE,IAAR;AAAcC,eAAS,EAAE;AAAzB,KAbqB,CAAvB;;QAoBaG,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBN,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBK,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBN,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACjC7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaU,Y,GAGX,wBAAc;AAAA;;AAFd,WAAAC,KAAA,GAAQ,oBAAR;AAGC,K;;;uBAJUD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,iD;AAAA;AAAA;ACRzB;;AAEA;;;;;;;;;sEDMaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;AERzkD,CAQA;AAmBA;AAGA;;;QAgDaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBAnBJ,CACP,uEADO,EAEP,kEAFO,EAGP,oEAHO,EAIP,4FAJO,EAKP,qEALO,EAMP,wEANO,EAOP,0EAPO,EAQP,oEARO,EASP,qEATO,EAUP,4FAVO,EAWP,2EAXO,EAYP,uEAZO,EAaP,sEAbO,EAcP,yDAdO,EAeP,2DAfO,EAgBP,uEAhBO,EAgBS,qEAhBT,EAiBP,qEAjBO,EAiBQ,gFAjBR,EAiB4B,yEAjB5B,EAiB6C,8EAjB7C,EAiBgE,uEAjBhE,EAiBgF,mEAjBhF,CAmBI;;;;0HAGFA,S,EAAS;AAAA,uBAlClB,2DAkCkB,EAjClB,4EAiCkB,EAhClB,+EAgCkB,EA/BlB,4EA+BkB,EA9BlB,kFA8BkB,EA7BlB,kFA6BkB,EA5BlB,yEA4BkB,EA3BlB,sGA2BkB,EA1BlB,mGA0BkB,EAzBlB,uFAyBkB,EAxBlB,+EAwBkB;AAxBH,kBAGf,uEAHe,EAIf,kEAJe,EAKf,oEALe,EAMf,4FANe,EAOf,qEAPe,EAQf,wEARe,EASf,0EATe,EAUf,oEAVe,EAWf,qEAXe,EAYf,4FAZe,EAaf,2EAbe,EAcf,uEAde,EAef,sEAfe,EAgBf,yDAhBe,EAiBf,2DAjBe,EAkBf,uEAlBe,EAkBC,qEAlBD,EAmBf,qEAnBe,EAmBA,gFAnBA,EAmBoB,yEAnBpB,EAmBqC,8EAnBrC,EAmBwD,uEAnBxD,EAmBwE,mEAnBxE;AAwBG,O;AALwF,K;;;;;sEAKjGA,S,EAAS;cApCrB,sDAoCqB;eApCZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,4EAFY,EAGZ,+EAHY,EAIZ,4EAJY,EAKZ,kFALY,EAMZ,kFANY,EAOZ,yEAPY,EAQZ,sGARY,EASZ,mGATY,EAUZ,uFAVY,EAWZ,+EAXY,CADN;AAcRP,iBAAO,EAAE,CACP,uEADO,EAEP,kEAFO,EAGP,oEAHO,EAIP,4FAJO,EAKP,qEALO,EAMP,wEANO,EAOP,0EAPO,EAQP,oEARO,EASP,qEATO,EAUP,4FAVO,EAWP,2EAXO,EAYP,uEAZO,EAaP,sEAbO,EAcP,yDAdO,EAeP,2DAfO,EAgBP,uEAhBO,EAgBS,qEAhBT,EAiBP,qEAjBO,EAiBQ,gFAjBR,EAiB4B,yEAjB5B,EAiB6C,8EAjB7C,EAiBgE,uEAjBhE,EAiBgF,mEAjBhF,CAdD;AAiCRQ,mBAAS,EAAE,EAjCH;AAkCRC,mBAAS,EAAE,CAAC,2DAAD;AAlCH,S;AAoCY,Q;;;;;;;;;;;;;;;;;;AC9EtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,sE,CACA;;;QAOaC,e;AAIX,iCAAc;AAAA;AAAG;;;;mCAET;AACN,eAAKC,IAAL,GAAYC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAZ;AACD;;;;;;;uBARUH,e;AAAe,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,qT;AAAA;AAAA;ACR5B;;AACE;;AACE;;AACI;;AACI;;AAAqB;;AAA0C;;AAAI;;AAAI;;AACvE;;AAAqB;;AAAyC;;AAAM;;AAAI;;AACxE;;AAAqB;;AAAkC;;AAAO;;AAAI;;AACtE;;AACA;;AACI;;AACJ;;AACJ;;AACF;;AACF;;;;AAJY;;AAAA;;;;;;;;;sEDDCA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTP,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;AER5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaS,e;AAEX,iCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,e;AAAe,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA;AAAA;ACP5B;;AACA;;AAAG;;AAAa;;;;;;;;;sEDMHA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTX,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;AEP5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaU,c;AAEX,gCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,c;AAAc,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,uqB;AAAA;AAAA;ACP3B;;AACA;;AACI;;AACQ;;AAAG;;AAOyB;;AACtC;;AACF;;AAEA;;AACI;;AACI;;AACI;;AACI;;AAAgB;;AAAU;;AAC1B;;AAAmB;;AAAY;;AACnC;;AACA;;AACI;;AACJ;;AACA;;AACI;;AAAgC;;AAAK;;AACrC;;AAAgC;;AAAI;;AACxC;;AACJ;;AACA;;AACI;;AACI;;AAAgB;;AAAU;;AAC1B;;AAAmB;;AAAY;;AACnC;;AACA;;AACI;;AACJ;;AACA;;AACI;;AAAgC;;AAAK;;AACrC;;AAAgC;;AAAI;;AACxC;;AACJ;;AACA;;AACI;;AACI;;AAAgB;;AAAU;;AAC1B;;AAAmB;;AAAY;;AACnC;;AACA;;AACI;;AACJ;;AACA;;AACI;;AAAgC;;AAAK;;AACrC;;AAAgC;;AAAI;;AACxC;;AACJ;;AACJ;;AACJ;;AAEA;;AACI;;AACI;;AAAsD;;AAAK;;AAC3D;;AAAuD;;AAAO;;AACpE;;AACF;;AACA;;;;;;;;;sEDzDaA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTZ,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;AEP3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACegC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;;;AAcjC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;QDjBpDW,c;AAKX,8BAAoBC,WAApB,EAAsDC,GAAtD,EAA+EC,MAA/E,EAA+F;AAAA;;AAA3E,aAAAF,WAAA,GAAAA,WAAA;AAAkC,aAAAC,GAAA,GAAAA,GAAA;AAAyB,aAAAC,MAAA,GAAAA,MAAA,CAAgB,CA2B/F;;AACA,aAAAC,cAAA,GAAiB;AACf,mBAAS,CACP;AAAEC,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADO,EAEP;AAAED,gBAAI,EAAE,OAAR;AAAiBC,mBAAO,EAAE;AAA1B,WAFO,CADM;AAKf,sBAAY,CACV;AAAED,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADU,EAEV;AAAED,gBAAI,EAAE,WAAR;AAAqBC,mBAAO,EAAE;AAA9B,WAFU;AALG,SAAjB;AA5BiG,O,CACjG;;;;;kCACUC,W,EAAiB;AAAA;;AACzB,eAAKC,SAAL,GAAiB,EAAjB;;AACA,cAAGD,WAAW,KAAK,IAAnB,EAAwB;AACtB,iBAAKE,UAAL,GAAkB;AAChB,0BAAWF,WAAW,CAACG,KADP;AAEhB,0BAAWH,WAAW,CAACI;AAFP,aAAlB;AAKA,iBAAKT,GAAL,CAASU,SAAT,CAAmB,KAAKH,UAAxB,EAAoCI,SAApC,CACE,UAAAC,IAAI,EAAI;AAAEC,qBAAO,CAACC,GAAR,CAAYF,IAAZ;AACRlB,0BAAY,CAACqB,UAAb,CAAwB,MAAxB;AACArB,0BAAY,CAACsB,OAAb,CAAqB,MAArB,EAA6BJ,IAAI,CAAC,MAAD,CAAjC;AACA,mBAAI,CAACN,SAAL,GAAiB,EAAjB;;AACF,mBAAI,CAACL,MAAL,CAAYgB,QAAZ,CAAqB,CAAC,UAAD,CAArB;AACD,aAND,EAOE,UAAAC,KAAK,EAAI;AACPL,qBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,KAAK,CAACA,KAAtC;;AACA,kBAAGA,KAAK,CAACC,MAAN,IAAgB,GAAnB,EAAuB;AACrB,qBAAI,CAACb,SAAL,GAAiBY,KAAK,CAACA,KAAvB;AACD;AACF,aAZH;AAaD;AAEF;;;mCAcU;AACT,eAAKE,SAAL,GAAiB,KAAKrB,WAAL,CAAiBsB,KAAjB,CAAuB;AACtCb,iBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWc,QAAZ,EAAsB,0DAAWd,KAAjC,CAAL,CAD+B;AAEtCC,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWa,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAL;AAF4B,WAAvB,CAAjB;AAKD;;;;;;;uBAlDUzB,c,EAAc,2H,EAAA,wI,EAAA,uH;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,mvB;AAAA;AAAA;ACZ3B;;AACI;;AACI;;AACI;;AACI;;AAAkC;;AAAK;;AAC3C;;AACA;;AACI;;AAA8B;AAAA,mBAAY,IAAAY,SAAA,qBAAZ;AAAsC,WAAtC;;AAC1B;;AACA;;AACI;;AAAW;;AAAgB;;AAC3B;;AACJ;;AACI;;AACI;;AAKJ;;AACJ;;AAEA;;AACA;;AACI;;AAAW;;AAAmB;;AAC9B;;AACJ;;AACI;;AACI;;AAKA;;AAAqB;;AAAa;;AACtC;;AACJ;;AACA;;AAA4F;;AAAK;;AACjG;;AAA+D;;AAAM;;AACzE;;AACJ;;AACA;;AACI;;AAA4C;;AAAe;;AAC/D;;AACJ;;AACJ;;AACJ;;;;AAtCsB;;AAAA;;AAOoB;;AAAA;;AAcA;;AAAA;;AAKO;;AAAA;;AAGW;;AAAA;;;;;;;;;sEDxB/CZ,c,EAAc;cAN1B,uDAM0B;eANhB;AACTb,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAMgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZ3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACSQ;;AACI;;AAAmC;AAAA;;AAAA;;AAAA;AAAA;;AAC/B;;AACI;;AAA2E;AAAA;;AAAA;;AAAA;AAAA;;AAA3E;;AACJ;;AACA;;AAAyF;;AAAI;;AACjG;;AAEA;;AAAuC;AAAA;;AAAA;;AAAA;AAAA;;AACnC;;AACI;;AAAmF;AAAA;;AAAA;;AAAA;AAAA;;AAAnF;;AACJ;;AACA;;AAA4F;;AAAI;;AACpG;;AACJ;;;;;;AAbU;;AAAA;;AAE0C;;AAAA;;AAEJ;;AAAA;;AAGtC;;AAAA;;AAE8C;;AAAA;;AAER;;AAAA;;;;;;AAQpD;;AACI;;AACI;;AAAgB;;AAAe;;AAC/B;;AAAmB;;AAAmC;;AAC1D;;AACA;;AACI;;AACA;;AACJ;;AACA;;AACI;;AAAgC;;AAAK;;AACzC;;AACJ;;;;;;AAVwB;;AAAA;;AACG;;AAAA;;AAIH;;AAAA;;;;;;AAR5B;;AACI;;;;AAaJ;;;;;;AAbc;;AAAA;;;;QDjBDqC,gB;AAYX,gCAAoBC,cAApB,EAA4DC,KAA5D,EAAmF1B,GAAnF,EAA4GD,WAA5G,EAAsI;AAAA;;AAAlH,aAAA0B,cAAA,GAAAA,cAAA;AAAwC,aAAAC,KAAA,GAAAA,KAAA;AAAuB,aAAA1B,GAAA,GAAAA,GAAA;AAAyB,aAAAD,WAAA,GAAAA,WAAA;AA8B5G,aAAAG,cAAA,GAAiB;AACf,sBAAY,CACV;AAAEC,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADU,EAEV;AAAED,gBAAI,EAAE,OAAR;AAAiBC,mBAAO,EAAE;AAA1B,WAFU;AADG,SAAjB;AA9ByI;;;;qCAE/H;AAAA;;AACR,eAAKC,WAAL,GAAmB,IAAnB;;AACE,cAAG,KAAKsB,gBAAL,IAAyBC,SAA5B,EAAsC;AACtC,iBAAKvB,WAAL,GAAmB;AACjB,uBAAS,KAAKwB,KADG;AAEjB,sBAAQ,KAAKF;AAFI,aAAnB;AAIA,iBAAK3B,GAAL,CAAS8B,UAAT,CAAoB,KAAKzB,WAAzB,EAAsCM,SAAtC,CAAiD,UAAAC,IAAI,EAAI;AACvD,oBAAI,CAACmB,iBAAL,CAAuB,MAAvB,IAAiCnB,IAAI,CAAC,MAAD,CAArC;AACD,aAFD;AAGD,WARC,MASE;AAAEC,mBAAO,CAACC,GAAR,CAAY,mBAAZ;AAAkC;AACzC;;;yCAEa;AAAA;;AACZ,eAAKT,WAAL,GAAmB,IAAnB;;AACA,cAAG,KAAK2B,oBAAL,IAA6BJ,SAAhC,EAA0C;AAC1C,iBAAKvB,WAAL,GAAmB;AACjB,uBAAS,KAAKwB,KADG;AAEjB,0BAAY,KAAKG;AAFA,aAAnB;AAIA,iBAAKhC,GAAL,CAASiC,cAAT,CAAwB,KAAK5B,WAA7B,EAA0CM,SAA1C,CAAqD,UAAAC,IAAI,EAAI;AAC3D,oBAAI,CAACmB,iBAAL,CAAuB,UAAvB,IAAqCnB,IAAI,CAAC,UAAD,CAAzC;AACD,aAFD;AAGD,WARC,MASE;AAACC,mBAAO,CAACC,GAAR,CAAY,mBAAZ;AAAiC;AACrC;;;yCASa;AACZ,eAAKoB,UAAL,GAAkB,KAAKlC,GAAL,CAASmC,gBAAT,CAA0B,KAAK9B,WAA/B,CAAlB;AACD;;;mCAEO;AAAA;;AACN;AAEA,eAAKA,WAAL,GAAmB;AACjB,qBAAS,KAAKwB;AADG,WAAnB;AAIA,eAAK7B,GAAL,CAASoC,OAAT,CAAiB,KAAK/B,WAAtB,EAAmCM,SAAnC,CAA8C,UAAAC,IAAI,EAAI;AACpD,kBAAI,CAACmB,iBAAL,GAAyBnB,IAAzB;AAEA,kBAAI,CAACyB,cAAL,GAAsB,MAAI,CAACtC,WAAL,CAAiBsB,KAAjB,CAAuB;AAC3C5B,kBAAI,EAAE,CAACmB,IAAI,CAAC,MAAD,CAAL,EAAe,CAAC,0DAAWU,QAAZ,EAAsB,0DAAWgB,OAAX,CAAmB,YAAnB,CAAtB,CAAf;AADqC,aAAvB,CAAtB;AAIA,kBAAI,CAACC,kBAAL,GAA0B,MAAI,CAACxC,WAAL,CAAiBsB,KAAjB,CAAuB;AAC/CmB,sBAAQ,EAAE,CAAC5B,IAAI,CAAC,UAAD,CAAL,EAAmB,CAAC,0DAAWU,QAAZ,EAAsB,0DAAWd,KAAjC,CAAnB;AADqC,aAAvB,CAA1B;AAGD,WAVD;AAYA,eAAKiC,cAAL;AACD;;;;;;;uBAzEUjB,gB,EAAgB,+H,EAAA,uH,EAAA,wI,EAAA,2H;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,a;AAAA,8vB;AAAA;AAAA;ACZ7B;;AACA;;AACA;;AACI;;AACI;;AACI;;AAAgB;;AAAO;;AAC3B;;AACA;;AACA;;AAAK;;AAAL;;AACA;;AAeA;;AACJ;;AACJ;;AAEA;;AAeA;;;;AAlCa;;AAAA;;AAmBR;;AAAA;;;;;;;;;;sEDhBQA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTvC,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZ7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOauD,iB;AAEX,mCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,oC;AAAA,c;AAAA,a;AAAA;AAAA;ACP9B;;AAAG;;AAAgB;;;;;;;;sEDONA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTzD,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;AEP9B;AAAA;;;AAAA;AAAA;AAAA;;QAAawD,U;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,S;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,sE,CAGA;AACA;;;;;ACQQ;;AACI;;AACI;;AAAgB;;AAAe;;AAC/B;;AAAmB;;AAA6B;;AAChD;;AAAmB;;AAAyB;;AAChD;;AACA;;AACI;;AACJ;;AACA;;AACI;;AAAgC;;AAAK;;AACrC;;AAAuD;;AAAI;;AAC/D;;AACJ;;;;;;AAXwB;;AAAA;;AACG;;AAAA;;AACA;;AAAA;;AAGd;;AAAA;;;;QDNRC,gB;AASX,gCAAoB7C,GAApB,EAAqC;AAAA;;AAAjB,aAAAA,GAAA,GAAAA,GAAA;AAPpB,aAAA8C,OAAA,GAA4B,EAA5B;AAEA,aAAAC,OAAA,GAA6B,EAA7B;AAOC;;;;mCAEO;AAAA;;AAEN,eAAK/C,GAAL,CAASgD,mBAAT,GAA+BrC,SAA/B,CACE,UAAAC,IAAI,EAAG;AACL,iBAAI,IAAIqC,CAAC,GAAC,CAAV,EAAarC,IAAI,CAACqC,CAAD,CAAJ,IAAU,IAAvB,EAA6BA,CAAC,EAA9B,EAAiC;AAC/B,kBAAIC,SAAS,GAAG,IAAI,sDAAJ,EAAhB;AACAA,uBAAS,CAAC5E,EAAV,GAAesC,IAAI,CAACqC,CAAD,CAAJ,CAAQ3E,EAAvB;AACA4E,uBAAS,CAACC,MAAV,GAAmBvC,IAAI,CAACqC,CAAD,CAAJ,CAAQE,MAA3B;AACAD,uBAAS,CAACE,QAAV,GAAqBxC,IAAI,CAACqC,CAAD,CAAJ,CAAQG,QAA7B;;AACA,oBAAI,CAACL,OAAL,CAAaM,IAAb,CAAkBH,SAAlB;AAED;AACF,WAVH,EAWE,UAAAhC,KAAK,EAAI;AACPL,mBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,KAAK,CAACA,KAAtC;AACD,WAbH;AAeA,eAAKlB,GAAL,CAASsD,aAAT,GAAyB3C,SAAzB,CACE,UAAAC,IAAI,EAAI;AACN,iBAAI,IAAIqC,CAAC,GAAC,CAAV,EAAarC,IAAI,CAACqC,CAAD,CAAJ,IAAS,IAAtB,EAA4BA,CAAC,EAA7B,EACA;AACE,kBAAIM,SAAS,GAAG,IAAI,oDAAJ,EAAhB;AACAA,uBAAS,CAACjF,EAAV,GAAesC,IAAI,CAACqC,CAAD,CAAJ,CAAQ3E,EAAvB;AACAiF,uBAAS,CAAC9D,IAAV,GAAiBmB,IAAI,CAACqC,CAAD,CAAJ,CAAQxD,IAAzB;AACA8D,uBAAS,CAACC,WAAV,GAAwB5C,IAAI,CAACqC,CAAD,CAAJ,CAAQO,WAAhC;AACAD,uBAAS,CAACE,OAAV,GAAoB7C,IAAI,CAACqC,CAAD,CAAJ,CAAQQ,OAA5B;AAEA,kBAAIC,CAAC,GAAG,CAAR;AACA,kBAAIC,KAAK,GAAG,CAAZ;;AAEA,mBAAK,IAAIC,CAAC,GAAC,CAAX,EAAc,MAAI,CAACb,OAAL,CAAaa,CAAb,KAAiB,IAA/B,EAAqCA,CAAC,EAAtC,EAAyC;AACvC,oBAAI,MAAI,CAACb,OAAL,CAAaa,CAAb,EAAgBR,QAAhB,IAA4BxC,IAAI,CAACqC,CAAD,CAAJ,CAAQ3E,EAAxC,EACA;AACEqF,uBAAK,GAAGA,KAAK,GAAG,MAAI,CAACZ,OAAL,CAAaa,CAAb,EAAgBT,MAAhC;AACAO,mBAAC,GAAGA,CAAC,GAAC,CAAN;AACD;AACF;;AAED,kBAAIA,CAAC,IAAI,CAAT,EAAW;AACTH,yBAAS,CAACJ,MAAV,GAAmB,CAAnB;AACD,eAFD,MAGI;AACFI,yBAAS,CAACJ,MAAV,GAAmBQ,KAAK,GAACD,CAAzB;AACD;;AACD,oBAAI,CAACZ,OAAL,CAAaO,IAAb,CAAkBE,SAAlB,EAxBF,CA0BE;;AACD,aA7BK,CA8BJ;;AACL,WAhCD,EAiCE,UAAArC,KAAK,EAAI;AACPL,mBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,KAAK,CAACA,KAAtC;AACD,WAnCH;AAqCD;;;oCAEW2C,W,EAAgB;AAC1B,cAAGA,WAAW,IAAIjC,SAAlB,EAA4B;AAC1B,iBAAK5B,GAAL,CAAS8D,kBAAT,CAA4BD,WAA5B,EAAyClD,SAAzC,CAAoD,UAAAC,IAAI,EAAI;AAC1D,kBAAImD,cAAc,GAAGC,MAAM,CAAC7F,IAAP,CAAYyC,IAAZ,EAAkBqD,MAAvC;;AACA,kBAAGF,cAAc,IAAI,CAArB,EACA;AACElD,uBAAO,CAACC,GAAR,CAAY,gCAAZ;AACD,eAHD,MAII;AACF;AACAD,uBAAO,CAACC,GAAR,CAAYF,IAAZ;AACD;AACF,aAVD;AAWD;AACF;;;mCAEO;AACN,eAAKsD,QAAL;AACD;;;;;;;uBAvFUrB,gB,EAAgB,wI;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,a;AAAA,wY;AAAA;AAAA;ACb7B;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AAA4B;AAAA;AAAA;;AAA5B;;AACA;;AAA+B;AAAA,mBAAS,IAAAsB,WAAA,wBAAT;AAAwC,WAAxC;;AAC7B;;AAAU;;AAAM;;AAClB;;AACJ;;AAEA;;AACI;;AACI;;AAcJ;;AACJ;;;;AAfkB;;AAAA;;;;;;;;;sEDCLtB,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACT5D,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;AEb7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACegC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;;;AAcjC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;;;AAc7B;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;QDhCxDiF,sB;AAMX,sCAAoBrE,WAApB,EAAsDC,GAAtD,EAA+EC,MAA/E,EAA6F;AAAA;;AAAzE,aAAAF,WAAA,GAAAA,WAAA;AAAkC,aAAAC,GAAA,GAAAA,GAAA;AAAyB,aAAAC,MAAA,GAAAA,MAAA,CAAc,CA+B7F;;AACA,aAAAC,cAAA,GAAiB;AACf,mBAAS,CACP;AAAEC,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADO,EAEP;AAAED,gBAAI,EAAE,OAAR;AAAiBC,mBAAO,EAAE;AAA1B,WAFO,CADM;AAKf,sBAAY,CACV;AAAED,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADU,EAEV;AAAED,gBAAI,EAAE,WAAR;AAAqBC,mBAAO,EAAE;AAA9B,WAFU,CALG;AASf,6BAAmB,CACjB;AAAED,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADiB,EAEjB;AAAED,gBAAI,EAAE,WAAR;AAAqBC,mBAAO,EAAE;AAA9B,WAFiB;AATJ,SAAjB;AAhCkG,O,CAElG;;;;;sCACcC,W,EAAiB;AAAA;;AAC7B,eAAKgE,SAAL,GAAiB,EAAjB;AACA,eAAK/D,SAAL,GAAiB,EAAjB;;AACA,cAAG,KAAKgE,gBAAL,CAAsB,KAAKC,iBAAL,CAAuBC,QAAvB,CAAgC,UAAhC,EAA4CC,KAAlE,EAAyE,KAAKF,iBAAL,CAAuBC,QAAvB,CAAgC,iBAAhC,EAAmDC,KAA5H,KAAsI,IAAzI,EAA8I;AAC5I,iBAAKlE,UAAL,GAAkB;AAChB,0BAAYF,WAAW,CAACG,KADR;AAEhB,0BAAYH,WAAW,CAACI;AAFR,aAAlB;;AAIA,gBAAG,KAAKF,UAAL,IAAmB,IAAtB,EAA2B;AACzB,mBAAKP,GAAL,CAAS0E,aAAT,CAAuB,KAAKnE,UAA5B,EAAwCI,SAAxC,CACE,YAAM,CAAE,CADV,EAEE,UAAAO,KAAK,EAAI;AACP,oBAAGA,KAAK,CAACC,MAAN,IAAgB,GAAnB,EAAuB;AACrB,wBAAI,CAACb,SAAL,GAAiBY,KAAK,CAACA,KAAvB;AACD,iBAFD,MAIA;AACE,wBAAI,CAACjB,MAAL,CAAYgB,QAAZ,CAAqB,CAAC,eAAD,EAAkB;AAAEb,2BAAO,EAAE;AAAX,mBAAlB,CAArB;AACD;AACF,eAVH;AAWD;AACF,WAlBD,MAoBA;AACE,iBAAKE,SAAL,GAAiB,wBAAjB;AACD;AACF;;;mCAkBU;AACT,eAAKiE,iBAAL,GAAyB,KAAKxE,WAAL,CAAiBsB,KAAjB,CAAuB;AAC9Cb,iBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWc,QAAZ,EAAsB,0DAAWd,KAAjC,CAAL,CADuC;AAE9CC,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWa,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAFoC;AAG9CoD,2BAAe,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWrD,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAL;AAH6B,WAAvB,CAAzB;AAKD,S,CAED;;;;yCACiBqD,a,EAAuBC,c,EAAwB;AAC9D,cAAID,aAAa,KAAKC,cAAtB,EAAsC;AAClC,mBAAO,KAAP;AACH,WAFD,MAEO;AACL,mBAAO,IAAP;AACD;AACJ;;;;;;;uBApEYT,sB,EAAsB,2H,EAAA,wI,EAAA,uH;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,8yB;AAAA;AAAA;ACXnC;;AACI;;AACI;;AACI;;AACI;;AAAkC;;AAAc;;AACpD;;AACA;;AACI;;AAAsC;AAAA,mBAAY,IAAAM,aAAA,6BAAZ;AAAkD,WAAlD;;AAClC;;AACA;;AACI;;AAAW;;AAAgB;;AAC3B;;AACJ;;AACI;;AACI;;AAKJ;;AACJ;;AAEA;;AACA;;AACI;;AAAW;;AAAmB;;AAC9B;;AACJ;;AACI;;AACI;;AAKJ;;AACJ;;AAEA;;AACI;;AACI;;AAAW;;AAAgB;;AAC3B;;AACJ;;AACI;;AACI;;AAKA;;AAAqB;;AAAa;;AACtC;;AACR;;AAEA;;AAAoG;;AAAM;;AAC1G;;AAA+D;;AAAM;;AACzE;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAlDsB;;AAAA;;AAOoB;;AAAA;;AAcA;;AAAA;;AAcI;;AAAA;;AAKO;;AAAA;;AAIO;;AAAA;;;;;;;;;sEDxC/CN,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTnF,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEXnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASa2F,qB;AAEX,qCAAoBpD,KAApB,EAAmDzB,MAAnD,EAAiE;AAAA;;AAA7C,aAAAyB,KAAA,GAAAA,KAAA;AAA+B,aAAAzB,MAAA,GAAAA,MAAA;AAAmB;;;;mCAE3D;AACT,cAAIG,OAAO,GAAG,KAAKsB,KAAL,CAAWqD,QAAX,CAAoBC,QAApB,CAA6BC,GAA7B,CAAiC,SAAjC,CAAd;AACD;;;;;;;uBANUH,qB,EAAqB,+H,EAAA,uH;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,e;AAAA,a;AAAA,uQ;AAAA;AAAA;ACTlC;;AACI;;AACI;;AACI;;AACI;;AAAkC;;AAA2B;;AACjE;;AACA;;AACQ;;AAAG;;AAAY;;AACf;;AAA+D;;AAAK;;AAC5E;;AACJ;;AACJ;;AACJ;;;;;;;;;sEDHaA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACT7F,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;AETlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACegC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;;;AAcjC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;;;AAcjC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;;;AAajC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAFR;;AACI;;AAGJ;;;;;;;;AAHqC;;AAAA;;;;QD7CpD+F,e;AAKX,+BAAoBnF,WAApB,EAAsDC,GAAtD,EAA+EC,MAA/E,EAA+F;AAAA;;AAA3E,aAAAF,WAAA,GAAAA,WAAA;AAAkC,aAAAC,GAAA,GAAAA,GAAA;AAAyB,aAAAC,MAAA,GAAAA,MAAA,CAAgB,CA8B/F;;AACA,aAAAC,cAAA,GAAiB;AACf,kBAAQ,CACN;AAAEC,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADM,EAEN;AAAED,gBAAI,EAAE,SAAR;AAAmBC,mBAAO,EAAE;AAA5B,WAFM,CADO;AAKf,mBAAS,CACP;AAAED,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADO,EAEP;AAAED,gBAAI,EAAE,OAAR;AAAiBC,mBAAO,EAAE;AAA1B,WAFO,CALM;AASf,sBAAY,CACV;AAAED,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADU,EAEV;AAAED,gBAAI,EAAE,WAAR;AAAqBC,mBAAO,EAAE;AAA9B,WAFU,CATG;AAaf,6BAAmB,CACjB;AAAED,gBAAI,EAAE,UAAR;AAAoBC,mBAAO,EAAE;AAA7B,WADiB,EAEjB;AAAED,gBAAI,EAAE,WAAR;AAAqBC,mBAAO,EAAE;AAA9B,WAFiB;AAbJ,SAAjB;AA/BiG,O,CAEjG;;;;;sCACc+E,U,EAAe;AAAA;;AAC3B,eAAK7E,SAAL,GAAiB,EAAjB;;AACA,cAAG,KAAKgE,gBAAL,CAAsB,KAAKc,UAAL,CAAgBZ,QAAhB,CAAyB,UAAzB,EAAqCC,KAA3D,EAAkE,KAAKW,UAAL,CAAgBZ,QAAhB,CAAyB,iBAAzB,EAA4CC,KAA9G,KAAwH,IAA3H,EAAgI;AAC9H,iBAAKY,OAAL,GAAe;AACb,sBAAQF,UAAU,CAAC1F,IADN;AAEb,0BAAY0F,UAAU,CAAC3E,KAFV;AAGb,0BAAY2E,UAAU,CAAC1E;AAHV,aAAf;;AAKA,gBAAG,KAAK4E,OAAL,IAAgB,IAAnB,EAAwB;AACtB,mBAAKrF,GAAL,CAASmF,UAAT,CAAoB,KAAKE,OAAzB,EAAkC1E,SAAlC,CACE,UAAAC,IAAI,EAAI;AAACC,uBAAO,CAACC,GAAR,CAAYF,IAAZ;;AACL,sBAAI,CAACX,MAAL,CAAYgB,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACD,eAHL,EAIE,UAAAC,KAAK,EAAI;AACPL,uBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,KAAK,CAACA,KAAtC;;AACA,oBAAGA,KAAK,CAACC,MAAN,IAAgB,GAAnB,EAAuB;AACrB,wBAAI,CAACb,SAAL,GAAiBY,KAAK,CAACA,KAAvB;AACD;AACF,eATH;AAUD;AACF,WAlBD,MAoBA;AACE,iBAAKZ,SAAL,GAAiB,wBAAjB;AACD;AACF;;;mCAsBU;AACT,eAAK8E,UAAL,GAAkB,KAAKrF,WAAL,CAAiBsB,KAAjB,CAAuB;AACvC5B,gBAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAW6B,QAAZ,EAAsB,0DAAWgB,OAAX,CAAmB,YAAnB,CAAtB,CAAL,CADiC;AAEvC9B,iBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWc,QAAZ,EAAsB,0DAAWd,KAAjC,CAAL,CAFgC;AAGvCC,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWa,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAH6B;AAIvCoD,2BAAe,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWrD,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAL;AAJsB,WAAvB,CAAlB;AAMD,S,CAED;;;;yCACiBqD,a,EAAuBC,c,EAAwB;AAC1D,cAAID,aAAa,KAAKC,cAAtB,EAAsC;AACpC;AACE,mBAAO,KAAP;AACH,WAHD,MAGO;AACL;AACA,mBAAO,IAAP;AACD;AACJ;;;;;;;uBAzEQK,e,EAAe,2H,EAAA,iI,EAAA,uH;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,u5B;AAAA;AAAA;ACX5B;;AACI;;AACI;;AACI;;AACI;;AAAkC;;AAAO;;AAC7C;;AACA;;AACI;;AAA+B;AAAA,mBAAY,IAAAI,aAAA,sBAAZ;AAA2C,WAA3C;;AAC3B;;AACA;;AACI;;AAAW;;AAAoB;;AAC/B;;AACJ;;AACI;;AACI;;AAKJ;;AACJ;;AAEA;;AACA;;AACI;;AAAW;;AAAgB;;AAC3B;;AACJ;;AACI;;AACI;;AAKJ;;AACJ;;AAEA;;AACA;;AACI;;AAAW;;AAAmB;;AAC9B;;AACJ;;AACI;;AACI;;AAKJ;;AACJ;;AACA;;AACA;;AACI;;AAAW;;AAAgB;;AAC3B;;AACJ;;AACI;;AACI;;AAKA;;AAAqB;;AAAa;;AACtC;;AACJ;;AACA;;AAA4F;;AAAO;;AAEnG;;AAAqE;;AAAM;;AAC/E;;AACJ;;AACJ;;AACJ;;AACJ;;;;AA/DsB;;AAAA;;AAOoB;;AAAA;;AAcA;;AAAA;;AAcA;;AAAA;;AAaA;;AAAA;;AAKO;;AAAA;;AAGW;;AAAA;;;;;;;;;sEDpD/CJ,e,EAAe;cAL3B,uDAK2B;eALjB;AACTjG,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEX5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWaoG,U;AAEX,0BAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAAqB;AAEzC;;;AAGA;;;;;mCACWH,O,EAAa;AACtB,cAAMI,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,8BAAgB;AAAlB,aAAhB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAe,8DAAf,EAA8EN,OAA9E,EAAuFI,WAAvF,CAAP;AACD;;;kCAESpF,W,EAAiB;AACzB,cAAMoF,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAe,yDAAf,EAA0EtF,WAA1E,EAAuFoF,WAAvF,CAAP;AACD;;;sCAEapF,W,EAAiB;AAC7B,cAAMoF,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUI,GAAV,CAAc,iEAAd,EAAiFvF,WAAjF,EAA8FoF,WAA9F,CAAP;AACD;;;gCAEO5D,K,EAAU;AAChB,cAAM4D,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,8BAAgB;AAAlB,aAAhB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAe,2DAAf,EAA2E9D,KAA3E,EAAkF4D,WAAlF,CAAP;AACD;;;mCAEUpF,W,EAAiB;AAC1B,cAAMoF,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUI,GAAV,CAAc,8DAAd,EAA8EvF,WAA9E,EAA2FoF,WAA3F,CAAP;AACD;;;uCAEcpF,W,EAAiB;AAC9B,cAAMoF,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUI,GAAV,CAAc,kEAAd,EAAkFvF,WAAlF,EAA+FoF,WAA/F,CAAP;AACD;;;yCAEgB5D,K,EAAU;AACzB,cAAM4D,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAsB,oEAAtB,EAA4F9D,KAA5F,EAAmG4D,WAAnG,CAAP;AACD;;;gDAEuB5D,K,EAAU;AAChC,cAAM4D,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAe,0EAAf,EAA2F9D,KAA3F,EAAkG4D,WAAlG,CAAP;AACD;AAED;;;;AAKF;;;;;;wCAGa;AACX,iBAAO,KAAKD,IAAL,CAAUP,GAAV,CAAc,mEAAd,CAAP;AACD;;;yCAEgB7B,Q,EAAgB;AAC/B,iBAAO,KAAKoC,IAAL,CAAUP,GAAV,CAAc,0EAA0E7B,QAAxF,CAAP;AACD;;;wCAEeyC,M,EAAc;AAC5B,cAAMJ,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAe,kEAAf,EAAmFE,MAAnF,EAA2FJ,WAA3F,CAAP;AACD;;;8CAEqBtC,M,EAAoB;AACxC,cAAMsC,WAAW,GAAG;AAAEC,mBAAO,EAAE,IAAI,gEAAJ,CAAiB;AAAE,8BAAgB;AAAlB,aAAjB;AAAX,WAApB;AACA,iBAAO,KAAKF,IAAL,CAAUG,IAAV,CAAe,wEAAf,EAAyFxC,MAAzF,EAAiGsC,WAAjG,CAAP;AACD;;;8CAEkB;AACjB,iBAAO,KAAKD,IAAL,CAAUP,GAAV,CAAc,yEAAd,CAAP;AACD;;;2CAEkBa,I,EAAS;AAC1B,iBAAO,KAAKN,IAAL,CAAUP,GAAV,CAAc,4EAA4Ea,IAA1F,CAAP;AACD;;;;;;;uBAhFYP,U,EAAU,uH;AAAA,K;;;aAAVA,U;AAAU,eAAVA,UAAU,K;AAAA,kBAFT;;;;;sEAEDA,U,EAAU;cAHtB,wDAGsB;eAHX;AACVQ,oBAAU,EAAE;AADF,S;AAGW,Q;;;;;;;;;;;;;;;;;;;;;;ACXvB;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAItF,OAAO,CAACK,KAAR,CAAciF,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { IndexComponent } from './pages/index/index.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { ProfileComponent } from './pages/profile/profile.component';\nimport { RatingsComponent } from './pages/ratings/ratings.component';\nimport { ResetPasswordComponent } from './pages/reset-password/reset-password.component';\nimport { ResetSuccessComponent } from './pages/reset-success/reset-success.component';\nimport { RateFormComponent } from './pages/rate-form/rate-form.component';\nimport { CreateComponent } from './pages/create/create.component';\n\n\nconst routes: Routes = [\n  {path: 'index', component: IndexComponent},\n  {path: 'signup', component: SignupComponent},\n  {path: 'login', component: LoginComponent},\n  {path: 'profile', component: ProfileComponent},\n  {path: 'ratings', component: RatingsComponent},\n  {path: 'resetPassword', component: ResetPasswordComponent},\n  {path: 'resetSuccess', component: ResetSuccessComponent},\n  {path: 'rateForm', component: RateFormComponent},\n  {path: 'create', component: CreateComponent},\n\n    // otherwise redirect to home\n  { path: '', redirectTo: '/index', pathMatch: 'full' },\n  { path: '**', component: IndexComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'prometheus-puzzles';\n  \n  constructor() {\n  }\n\n}\n","<img src=\"assets/images/logo.jpg\">\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {NgxPaginationModule} from 'ngx-pagination';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n//\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport { MatToolbarModule} from '@angular/material/toolbar';\nimport { MatTableModule} from '@angular/material/table';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatGridListModule } from '@angular/material/grid-list'\nimport { MatRadioModule } from '@angular/material/radio';\nimport {MatListModule} from '@angular/material/list';\n\n//import { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\n//pages\nimport { IndexComponent } from './pages/index/index.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { ProfileComponent } from './pages/profile/profile.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { RatingsComponent } from './pages/ratings/ratings.component';\nimport { ResetPasswordComponent } from './pages/reset-password/reset-password.component';\nimport { ResetSuccessComponent } from './pages/reset-success/reset-success.component';\nimport { RateFormComponent } from './pages/rate-form/rate-form.component';\nimport { CreateComponent } from './pages/create/create.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    IndexComponent,\n    SignupComponent,\n    LoginComponent,\n    ProfileComponent,\n    RatingsComponent,\n    NavbarComponent,\n    ResetPasswordComponent,\n    ResetSuccessComponent,\n    RateFormComponent,\n    CreateComponent,\n  ],\n  imports: [\n    BrowserModule,\n    NgxPaginationModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatIconModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatToolbarModule,\n    MatTableModule,\n    HttpClientModule,\n    HttpModule,\n    FormsModule,\n    MatInputModule, MatListModule,\n    MatCardModule, MatFormFieldModule, MatDialogModule, MatGridListModule, MatRadioModule, ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n//import { getName } from '.././pages/login/login.component';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  name:string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.name = localStorage.getItem('name');\n  }\n\n}\n","<div class=\"row\">\n  <nav class=\"navbar justify-content-center\">\n    <div class=\"container\">\n        <ul class=\"nav navbar-nav mr-auto\" routerLinkActive=\"active\">\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"/ratings\">View</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"/create\">Create</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"\">Profile</a></li>\n        </ul>\n        <span class=\"navbar-text\">\n            Hello, {{name}}\n        </span>\n    </div>\n  </nav>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-navbar></app-navbar>\n<p>create works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-index',\n  templateUrl: './index.component.html',\n  styleUrls: ['./index.component.css']\n})\nexport class IndexComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"content\">\n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"descText\">\n    <mat-card fxFlex=\"90\">\n            <p>Puzzles have been a hobby of many people over the centuries, coming in various\n            forms which have various ways of solving. Puzzles have played a role in people’s\n            problem solving skills. Puzzle generators have allowed for more puzzles to be\n            created, using various techniques to create interesting and challenging puzzles.\n            The system requested by the client involves the creation of 3-Dimensional puzzles (manually and from the use of AI), testing of puzzles, sharing and rating of\n            puzzles by other users, as well as the ability of downloading 3D printable files.\n            Team Prometheus, has come up with a way to develop the system according to\n            the client’s specifications.</p>\n  </mat-card>\n</div>\n\n<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\" >\n        <mat-card  class=\"child-1\">\n            <mat-card-header>\n                <mat-card-title>Puzzle One</mat-card-title>\n                <mat-card-subtitle>Created by X</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img class=\"indexImg\" src=\"assets/images/imgC.jpg\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\">RATE</button>\n            </mat-card-actions>\n        </mat-card>\n        <mat-card  class=\"child-2\">\n            <mat-card-header>\n                <mat-card-title>Puzzle One</mat-card-title>\n                <mat-card-subtitle>Created by X</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img class=\"indexImg\"  src=\"assets/images/imgB.jpg\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\">RATE</button>\n            </mat-card-actions>\n        </mat-card>\n        <mat-card class=\"child-3\">\n            <mat-card-header>\n                <mat-card-title>Puzzle One</mat-card-title>\n                <mat-card-subtitle>Created by X</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img class=\"indexImg\"  src=\"assets/images/imgC.jpg\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\">RATE</button>\n            </mat-card-actions>\n        </mat-card> \n    </div>\n</div>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"indexNavBtns\">\n    <mat-card fxFlex=\"90\" fxLayoutAlign=\"space-evenly center\">\n        <a routerLink=\"/login\" mat-raised-button class=\"btns\">Login</a>\n        <a routerLink=\"/signup\" mat-raised-button class=\"btns\">Sign Up</a>\n  </mat-card>\n</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { APIService } from 'src/app/services/api.service';\nimport { User } from 'src/app/models/User';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  verifyUser: any;\n  formError: string;\n\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router) {}\n  //method for logging in user and getting the token associated with the said user\n  loginUser(currentUser: User){\n    this.formError = '';\n    if(currentUser !== null){\n      this.verifyUser = {\n        \"username\":currentUser.email,\n        \"password\":currentUser.password\n      }\n\n      this.api.loginUser(this.verifyUser).subscribe(\n        data => { console.log(data);\n          localStorage.removeItem('name');\n          localStorage.setItem('name', data['name']);\n          this.formError = \"\";\n        this.router.navigate(['/ratings']);\n      },\n        error => {//if status code other than in the 200 range returned, show error\n          console.log('Error from API: ', error.error);\n          if(error.status >= 401){\n            this.formError = error.error;\n          }\n        })\n    }\n\n  }\n\n  //error messages used during login/register validation\n  error_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ]\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Login</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser(loginForm.value)\">\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your email</mat-label>\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.email\">\n                                <mat-error class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(error.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your password</mat-label>\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.password\">\n                                <mat-error class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(error.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                            <span id=\"passError\">{{formError}}</span>\n                        </div>\n                    </div>\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!loginForm.valid\" class=\"btns\" id=\"one\">Login</button>\n                    <a routerLink=\"/index\" mat-raised-button class=\"btns\" id=\"two\">Cancel</a>\n                </form>\n            </mat-card-content>\n            <mat-card-actions>\n                <a routerLink=\"/resetPassword\" class=\"link\">Forgot Password</a>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { APIService } from 'src/app/services/api.service';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { Puzzle } from 'src/app/models/Puzzle';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  nameTextboxValue: string;\n  usernameTextboxValue: string;\n  currentUserObject:any;\n  token: any;\n  currentUser: any;\n  updateNameForm: FormGroup;\n  updateUsernameForm: FormGroup;\n\n  //user  puzzle variables\n  puzzleList: Observable <Puzzle[]> ;\n\n  constructor(private activatedRoute: ActivatedRoute, private route: Router, private api: APIService, private formBuilder: FormBuilder) { }\n\n  updateName(){\n    this.currentUser = null;\n      if(this.nameTextboxValue != undefined){\n      this.currentUser = {\n        \"token\": this.token,\n        \"name\": this.nameTextboxValue\n      }\n      this.api.updateName(this.currentUser).subscribe( data => {\n        this.currentUserObject['name'] = data['name'];\n      });\n    }\n    else{ console.log(\"No value provided\");}\n  }\n\n  updateUsername(){\n    this.currentUser = null;\n    if(this.usernameTextboxValue != undefined){\n    this.currentUser = {\n      \"token\": this.token,\n      \"username\": this.usernameTextboxValue\n    }\n    this.api.updateUsername(this.currentUser).subscribe( data => {\n      this.currentUserObject['username'] = data['username'];\n    })\n  }\n  else{console.log(\"No value provided\")}\n  }\n\n  error_messages = {\n    'username': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ]\n  }\n\n  getUserPuzzles(){\n    this.puzzleList = this.api.getPuzzlesByUser(this.currentUser);\n  }\n\n  ngOnInit(): void {\n    /* Provide token here */\n\n    this.currentUser = {\n      \"token\": this.token\n    }\n\n    this.api.getUser(this.currentUser).subscribe( data => {\n      this.currentUserObject = data;\n\n      this.updateNameForm = this.formBuilder.group({ \n        name: [data['name'], [Validators.required, Validators.pattern('[a-zA-Z ]*')]]\n      });\n\n      this.updateUsernameForm = this.formBuilder.group({ \n        username: [data['username'], [Validators.required, Validators.email]]\n      });\n    });\n\n    this.getUserPuzzles();\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"content\">\n<div class=\"container\" >\n    <mat-card class=\"profile\">\n        <mat-card-header>\n            <mat-card-title>Profile</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n        <div><img src=\"assets/images/profile.jpg\" id=\"profileImage\"></div>\n        <div *ngIf=\"currentUserObject\">\n            <form [formGroup]=\"updateNameForm\" (ngSubmit)=\"updateName()\"> \n                <mat-form-field appearance=\"fill\">\n                    <input matInput formControlName=\"name\"  value=\"{{currentUserObject.name}}\" (input)=\"nameTextboxValue=$event.target.value\"> \n                </mat-form-field>\n                <button mat-raised-button type=\"submit\" [disabled]=\"!updateNameForm.valid\" class=\"btns\" >Save</button>\n            </form>\n\n            <form [formGroup]=\"updateUsernameForm\" (ngSubmit)=\"updateUsername()\"> \n                <mat-form-field appearance=\"fill\">\n                    <input matInput formControlName=\"username\"  value=\"{{currentUserObject.username}}\" (input)=\"usernameTextboxValue=$event.target.value\"> \n                </mat-form-field>\n                <button mat-raised-button type=\"submit\" [disabled]=\"!updateUsernameForm.valid\" class=\"btns\">Save</button>\n            </form>\n        </div>\n        </mat-card-content>\n    </mat-card>\n</div>\n\n<div *ngIf=\"currentUserObject\" class=\"flex-container\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\">\n    <mat-card *ngFor=\"let puzzle of puzzleList|async\" class=\"userPuzzles\">\n        <mat-card-header>\n            <mat-card-title>{{puzzle.name}}</mat-card-title>\n            <mat-card-subtitle>Description: {{puzzle.description}}</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n            <div></div>\n            <img id=\"image\" src=\"assets/images/puzzles/{{puzzle.id}}.png\">\n        </mat-card-content>\n        <mat-card-actions>\n            <button mat-button class=\"btns\">SHARE</button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n</div>\n\n<!--\n    (input)=\"nameTextboxValue=$event.target.value\"\n-->","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-rate-form',\n  templateUrl: './rate-form.component.html',\n  styleUrls: ['./rate-form.component.css']\n})\nexport class RateFormComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>rate-form works!</p>\n","export class RatingsArr{\n  id: number;\n  rating: number;\n  puzzleID: number;\n}\n","export class PuzzleArr{\n  id: number;\n  name: string;\n  description: string;\n  creator: number;\n  rating: number; \n}\n","import { Component, OnInit } from '@angular/core';\n//import { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { APIService } from 'src/app/services/api.service';\n//import { User } from 'src/app/models/User';\n//import { Router } from '@angular/router';\nimport { PuzzleArr } from './puzzleArr';\nimport { RatingsArr } from './RatingsArr';\n\n@Component({\n  selector: 'app-ratings',\n  templateUrl: './ratings.component.html',\n  styleUrls: ['./ratings.component.css']\n})\nexport class RatingsComponent implements OnInit {\n\n  puzzles: Array<PuzzleArr> = [];\n  name: string;\n  ratings: Array<RatingsArr> = [];\n\n  //searchbar\n  searchTextboxValue: string;\n\n  constructor(private api: APIService) {\n\n  }\n\n  populate()\n  {\n    this.api.getAllPuzzleRatings().subscribe(\n      data=> {\n        for(let i=0; data[i]!= null; i++){\n          let ratingObj = new RatingsArr();\n          ratingObj.id = data[i].id;\n          ratingObj.rating = data[i].rating;\n          ratingObj.puzzleID = data[i].puzzleID;\n          this.ratings.push(ratingObj);\n\n        }\n      },\n      error => {\n        console.log(\"Error from API: \", error.error);\n      });\n\n    this.api.getAllPuzzles().subscribe(\n      data => {\n        for(let i=0; data[i]!=null; i++)\n        {\n          let puzzleObj = new PuzzleArr();\n          puzzleObj.id = data[i].id;\n          puzzleObj.name = data[i].name;\n          puzzleObj.description = data[i].description;\n          puzzleObj.creator = data[i].creator;\n\n          let j = 0;\n          let total = 0;\n\n          for (let k=0; this.ratings[k]!=null; k++){\n            if (this.ratings[k].puzzleID == data[i].id)\n            {\n              total = total + this.ratings[k].rating;\n              j = j+1;\n            }\n          }\n\n          if (j == 0){\n            puzzleObj.rating = 0;\n          }\n          else{\n            puzzleObj.rating = total/j;\n          }\n          this.puzzles.push(puzzleObj);\n\n          //console.log(this.puzzles[i]);\n        }\n          //this.puzzles.push(data);\n    },\n      error => {//if status code other than in the 200 range returned, show error\n        console.log('Error from API: ', error.error);\n      })\n\n  }\n\n  searchItems(searchValue: any){\n    if(searchValue != undefined){\n      this.api.getSearchedPuzzles(searchValue).subscribe( data => {\n        var dataObjectSize = Object.keys(data).length;\n        if(dataObjectSize == 0 )\n        {\n          console.log(\"Nothing matches given criteria\")\n        }\n        else{\n          //Please populate the page with the data received. Other puzzles not fromd data must be cleared\n          console.log(data);\n        }\n      });\n    }\n  }\n\n  ngOnInit(): void {\n    this.populate();\n  }\n\n}\n","<app-navbar></app-navbar>\n\n<mat-form-field class=\"example-form-field\">\n    <mat-label>Search</mat-label>\n    <input matInput type=\"text\" (input)=\"searchTextboxValue=$event.target.value\">\n    <button mat-button matSuffix   (click)=\"searchItems(searchTextboxValue)\">\n      <mat-icon>search</mat-icon>\n    </button>\n</mat-form-field>\n\n<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\">\n        <mat-card *ngFor=\"let puzzle of puzzles\">\n            <mat-card-header>\n                <mat-card-title>{{puzzle.name}}</mat-card-title>\n                <mat-card-subtitle>Created by {{puzzle.creator}}</mat-card-subtitle>\n                <mat-card-subtitle>Rating: {{puzzle.rating}}</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img src=\"assets/images/puzzles/{{puzzle.id}}.png\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\" routerLink=\"/rateForm\">RATE</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { APIService } from 'src/app/services/api.service';\nimport { User } from 'src/app/models/User';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n  resetPasswordForm: FormGroup;\n  verifyUser: any;\n  formError: string;\n  resetDone: string;\n\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router ) {}\n\n  //method for logging in user and getting the token associated with the said user\n  resetPassword(currentUser: User){\n    this.resetDone = '';\n    this.formError = '';\n    if(this.doPasswordsMatch(this.resetPasswordForm.controls['password'].value, this.resetPasswordForm.controls['confirmPassword'].value) == true){\n      this.verifyUser = {\n        \"username\": currentUser.email,\n        \"password\": currentUser.password\n      }\n      if(this.verifyUser != null){\n        this.api.resetPassword(this.verifyUser).subscribe(\n          () => {},\n          error => {//if status code other than in the 200 range returned, show error\n            if(error.status >= 401){\n              this.formError = error.error;\n            }\n            else\n            {\n              this.router.navigate(['/resetSuccess', { message: \"Password reset. Please login\" }]);\n            }\n          })\n      }\n    }\n    else\n    {\n      this.formError = \"Passwords do not match\";\n    }\n  }\n\n  //error messages used during login/register validation\n  error_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n    'confirmPassword': [\n      { type: 'required', message: 'password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n  }\n\n  ngOnInit() {\n    this.resetPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  //checking if passwords match\n  doPasswordsMatch(firstPassword: string, secondPassword: string) {\n    if (firstPassword !== secondPassword) {\n        return false;\n    } else {\n      return true;\n    }\n}\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Reset Password</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword(resetPasswordForm.value)\"> \n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your email</mat-label>\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.email\">\n                                <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('email').hasError(error.type) && (resetPasswordForm.get('email').dirty || resetPasswordForm.get('email').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your password</mat-label>\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.password\">\n                                <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('password').hasError(error.type) && (resetPasswordForm.get('password').dirty || resetPasswordForm.get('password').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>Confirm password</mat-label>\n                            <input class=\"input\" matInput  required formControlName=\"confirmPassword\" type=\"password\">\n                        </mat-form-field> \n                            <div>\n                                <ng-container *ngFor=\"let error of error_messages.confirmPassword\">\n                                    <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('confirmPassword').hasError(error.type) && (resetPasswordForm.get('confirmPassword').dirty || resetPasswordForm.get('confirmPassword').touched)\">\n                                        {{ error.message }}\n                                    </mat-error>\n                                </ng-container>\n                                <span id=\"passError\">{{formError}}</span>\n                            </div> \n                    </div>\n\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!resetPasswordForm.valid\" class=\"btns\" id=\"one\">Submit</button>\n                    <a routerLink=\"/index\" mat-raised-button class=\"btns\" id=\"two\">Cancel</a>\n                </form>  \n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-reset-success',\n  templateUrl: './reset-success.component.html',\n  styleUrls: ['./reset-success.component.css']\n})\nexport class ResetSuccessComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute, private router: Router ) {}\n\n  ngOnInit() {\n    let message = this.route.snapshot.paramMap.get('message');\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Reset Password Successfully</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                    <p>Please login</p>\n                    <a routerLink=\"/login\" mat-raised-button class=\"btns\" id=\"two\">Login</a>\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\nimport { User } from '../../models/User';\nimport { APIService } from '../../services/api.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  signUpForm: FormGroup;\n  newUser: any;\n  formError: string;\n\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router) {}\n\n  //method for creating a new user. A new JSON object is created and sent to the node api\n  createNewUser(createUser: any){\n    this.formError = '';\n    if(this.doPasswordsMatch(this.signUpForm.controls['password'].value, this.signUpForm.controls['confirmPassword'].value) == true){\n      this.newUser = {\n        \"name\": createUser.name,\n        \"username\": createUser.email,\n        \"password\": createUser.password\n      }\n      if(this.newUser != null){\n        this.api.createUser(this.newUser).subscribe(\n          data => {console.log(data);\n              this.router.navigate(['/login']);\n            },\n          error => {//if status code other than in the 200 range returned, show error\n            console.log('Error from API: ', error.error);\n            if(error.status >= 401){\n              this.formError = error.error;\n            }\n          })\n      }\n    }\n    else\n    {\n      this.formError = \"Passwords do not match\";\n    }\n  }\n\n  //error messages used during login/register validation\n  error_messages = {\n    'name': [\n      { type: 'required', message: 'Full name is required.' },\n      { type: 'pattern', message: 'Name can only consist of letters' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n    'confirmPassword': [\n      { type: 'required', message: 'password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n  }\n\n  ngOnInit() {\n    this.signUpForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  //checking if passwords match\n  doPasswordsMatch(firstPassword: string, secondPassword: string) {\n        if (firstPassword !== secondPassword) {\n          //this.formError = \"Passwords do not match: \" + controlName + \" \" + matchingControlName;\n            return false;\n        } else {\n          //this.formError = \"Match: \" + controlName + \" \" + matchingControlName;\n          return true;\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Sign Up</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                <form [formGroup]=\"signUpForm\" (ngSubmit)=\"createNewUser(signUpForm.value)\"> \n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your full name</mat-label>\n                        <input class=\"input\" matInput placeholder=\"John Doe\" formControlName=\"name\" required >\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.name\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('name').hasError(error.type) && (signUpForm.get('name').dirty || signUpForm.get('name').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div> \n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your email</mat-label>\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.email\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('email').hasError(error.type) && (signUpForm.get('email').dirty || signUpForm.get('email').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your password</mat-label>\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.password\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('password').hasError(error.type) && (signUpForm.get('password').dirty || signUpForm.get('password').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Confirm password</mat-label>\n                        <input class=\"input\" matInput  required formControlName=\"confirmPassword\" type=\"password\">\n                    </mat-form-field> \n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.confirmPassword\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('confirmPassword').hasError(error.type) && (signUpForm.get('confirmPassword').dirty || signUpForm.get('confirmPassword').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                            <span id=\"passError\">{{formError}}</span>\n                        </div> \n                    </div>\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!signUpForm.valid\" class=\"btn\" id=\"one\">Sign Up</button>\n                    \n                    <a routerLink=\"/index\" mat-raised-button color=\"accent\" class=\"btns\">Cancel</a>\n                </form>  \n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { User } from '../models/User';\nimport { Puzzle } from '../models/Puzzle';\nimport { PuzzleRating } from '../models/PuzzleRating';\nimport {HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class APIService {\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * User endpoints start here\n   */\n  //create new user\n  createUser(newUser: User){\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json'} ) };\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/createUser',newUser, httpOptions);\n  }\n\n  loginUser(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/login', currentUser, httpOptions);\n  }\n\n  resetPassword(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.put('https://prometheuspuzzles.herokuapp.com/api/users/resetPassword', currentUser, httpOptions);\n  }\n\n  getUser(token: any){\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json'} ) };\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/getUser',token, httpOptions);\n  }\n\n  updateName(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.put('https://prometheuspuzzles.herokuapp.com/api/users/updateName', currentUser, httpOptions);\n  }\n\n  updateUsername(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.put('https://prometheuspuzzles.herokuapp.com/api/users/updateUsername', currentUser, httpOptions);\n  }\n\n  getPuzzlesByUser(token: any): Observable<any[]> {\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.post<any[]>('https://prometheuspuzzles.herokuapp.com/api/users/getPuzzlesByUser', token, httpOptions);\n  }\n\n  getPuzzleRatingssByUser(token: any){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/getPuzzleRatingsByUser', token, httpOptions);\n  }\n\n  /**\n   * User endpoints end here\n   */\n\n\n/**\n* Puzzle endpoints start here\n*/\ngetAllPuzzles(){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getAllPuzzles');\n}\n\ngetAllPuzzleByID(puzzleID: number){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getPuzzleByID?Id=' + puzzleID);\n}\n\ncreateNewPuzzle(puzzle: Puzzle){\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n  return this.http.post('https://prometheuspuzzles.herokuapp.com/api/puzzles/createPuzzle', puzzle, httpOptions);\n}\n\ncreateNewPuzzleRating(rating: PuzzleRating){\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n  return this.http.post('https://prometheuspuzzles.herokuapp.com/api/puzzles/createPuzzleRating', rating, httpOptions);\n}\n\ngetAllPuzzleRatings(){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getAllPuzzleRatings');\n}\n\ngetSearchedPuzzles(term: any){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getSearchedPuzzles/' + term);\n}\n\n/**\n* Puzzle endpoints end here\n*/\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}