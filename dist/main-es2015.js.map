{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/app/pages/create/create.component.ts","./src/app/pages/create/create.component.html","./src/app/pages/index/index.component.ts","./src/app/pages/index/index.component.html","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.component.html","./src/app/pages/profile/profile.component.ts","./src/app/pages/profile/profile.component.html","./src/app/pages/rate-form/rate-form.component.ts","./src/app/pages/rate-form/rate-form.component.html","./src/app/pages/ratings/RatingsArr.ts","./src/app/pages/ratings/puzzleArr.ts","./src/app/pages/ratings/ratings.component.ts","./src/app/pages/ratings/ratings.component.html","./src/app/pages/reset-password/reset-password.component.ts","./src/app/pages/reset-password/reset-password.component.html","./src/app/pages/reset-success/reset-success.component.ts","./src/app/pages/reset-success/reset-success.component.html","./src/app/pages/signup/signup.component.ts","./src/app/pages/signup/signup.component.html","./src/app/services/api.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACW;AACH;AACA;AACM;AACA;AACoB;AACH;AACZ;AACR;;;AAGlE,MAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,2EAAc,EAAC;IAC1C,EAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,8EAAe,EAAC;IAC5C,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,2EAAc,EAAC;IAC1C,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,iFAAgB,EAAC;IAC9C,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,iFAAgB,EAAC;IAC9C,EAAC,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,qGAAsB,EAAC;IAC1D,EAAC,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,kGAAqB,EAAC;IACxD,EAAC,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,sFAAiB,EAAC;IAChD,EAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,+EAAe,EAAC;IAE1C,6BAA6B;IAC/B,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE;IACrD,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,2EAAc,EAAC;CACzC,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;AChCD;AAAA;AAAA;AAAA;AAA0C;;;AAQnC,MAAM,YAAY;IAGvB;QAFA,UAAK,GAAG,oBAAoB,CAAC;IAG7B,CAAC;;wEAJU,YAAY;4FAAZ,YAAY;QCRzB,oEAEA;QAAA,2EAA+B;;6FDMlB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACU;AAEK;AACT;AACgC;AAE/E,EAAE;AACsD;AACG;AACE;AACN;AACA;AACsB;AACjB;AACJ;AACA;AACU;AACT;AACF;AACW;AACP;AACI;AACN;AACJ;AAErD,+CAA+C;AACJ;AAE3C,OAAO;AACwD;AACG;AACH;AACM;AACT;AACS;AACoB;AACH;AACZ;AACR;;AAsC3D,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAnBJ;YACP,uEAAa;YACb,kEAAmB;YACnB,oEAAgB;YAChB,4FAAuB;YACvB,qEAAgB;YAChB,wEAAe;YACf,0EAAgB;YAChB,oEAAa;YACb,qEAAa;YACb,4FAAwB;YACxB,2EAAgB;YAChB,uEAAc;YACd,sEAAgB;YAChB,yDAAU;YACV,2DAAW;YACX,uEAAc,EAAE,qEAAa;YAC7B,qEAAa,EAAE,gFAAkB,EAAE,yEAAe,EAAE,8EAAiB,EAAE,uEAAc,EAAE,mEAAmB;SAC3G;mIAIU,SAAS,mBAlClB,2DAAY;QACZ,4EAAc;QACd,+EAAe;QACf,4EAAc;QACd,kFAAgB;QAChB,kFAAgB;QAChB,yEAAe;QACf,sGAAsB;QACtB,mGAAqB;QACrB,uFAAiB;QACjB,+EAAe,aAGf,uEAAa;QACb,kEAAmB;QACnB,oEAAgB;QAChB,4FAAuB;QACvB,qEAAgB;QAChB,wEAAe;QACf,0EAAgB;QAChB,oEAAa;QACb,qEAAa;QACb,4FAAwB;QACxB,2EAAgB;QAChB,uEAAc;QACd,sEAAgB;QAChB,yDAAU;QACV,2DAAW;QACX,uEAAc,EAAE,qEAAa;QAC7B,qEAAa,EAAE,gFAAkB,EAAE,yEAAe,EAAE,8EAAiB,EAAE,uEAAc,EAAE,mEAAmB;6FAKjG,SAAS;cApCrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,4EAAc;oBACd,+EAAe;oBACf,4EAAc;oBACd,kFAAgB;oBAChB,kFAAgB;oBAChB,yEAAe;oBACf,sGAAsB;oBACtB,mGAAqB;oBACrB,uFAAiB;oBACjB,+EAAe;iBAChB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,kEAAmB;oBACnB,oEAAgB;oBAChB,4FAAuB;oBACvB,qEAAgB;oBAChB,wEAAe;oBACf,0EAAgB;oBAChB,oEAAa;oBACb,qEAAa;oBACb,4FAAwB;oBACxB,2EAAgB;oBAChB,uEAAc;oBACd,sEAAgB;oBAChB,yDAAU;oBACV,2DAAW;oBACX,uEAAc,EAAE,qEAAa;oBAC7B,qEAAa,EAAE,gFAAkB,EAAE,yEAAe,EAAE,8EAAiB,EAAE,uEAAc,EAAE,mEAAmB;iBAC3G;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AC7ED;AAAA;AAAA;AAAA;AAAkD;;;AAClD,6DAA6D;AAOtD,MAAM,eAAe;IAI1B,gBAAgB,CAAC;IAEjB,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;;8EARU,eAAe;+FAAf,eAAe;QCR5B,yEACE;QAAA,yEACE;QAAA,yEACI;QAAA,wEACI;QAAA,wEAAqB;QAAA,uEAA0C;QAAA,+DAAI;QAAA,4DAAI;QAAA,4DAAK;QAC5E,wEAAqB;QAAA,uEAAyC;QAAA,iEAAM;QAAA,4DAAI;QAAA,4DAAK;QAC7E,yEAAqB;QAAA,wEAAkC;QAAA,mEAAO;QAAA,4DAAI;QAAA,4DAAK;QAC3E,4DAAK;QACL,2EACI;QAAA,wDACJ;QAAA,4DAAO;QACX,4DAAM;QACR,4DAAM;QACR,4DAAM;;QAJM,2DACJ;QADI,2FACJ;;6FDFK,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAkD;;;AAO3C,MAAM,eAAe;IAE1B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8EALU,eAAe;+FAAf,eAAe;QCP5B,wEAAyB;QACzB,oEAAG;QAAA,wEAAa;QAAA,4DAAI;;6FDMP,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;AAO3C,MAAM,cAAc;IAEzB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;4EALU,cAAc;8FAAd,cAAc;QCP3B,yEACA;QAAA,yEACI;QAAA,8EACQ;QAAA,oEAAG;QAAA,4tBAOyB;QAAA,4DAAI;QAC1C,4DAAW;QACb,4DAAM;QAEN,yEACI;QAAA,yEACI;QAAA,8EACI;QAAA,kFACI;QAAA,iFAAgB;QAAA,sEAAU;QAAA,4DAAiB;QAC3C,qFAAmB;QAAA,wEAAY;QAAA,4DAAoB;QACvD,4DAAkB;QAClB,oFACI;QAAA,qEACJ;QAAA,4DAAmB;QACnB,oFACI;QAAA,6EAAgC;QAAA,iEAAK;QAAA,4DAAS;QAC9C,6EAAgC;QAAA,gEAAI;QAAA,4DAAS;QACjD,4DAAmB;QACvB,4DAAW;QACX,+EACI;QAAA,mFACI;QAAA,kFAAgB;QAAA,sEAAU;QAAA,4DAAiB;QAC3C,qFAAmB;QAAA,wEAAY;QAAA,4DAAoB;QACvD,4DAAkB;QAClB,oFACI;QAAA,qEACJ;QAAA,4DAAmB;QACnB,oFACI;QAAA,6EAAgC;QAAA,iEAAK;QAAA,4DAAS;QAC9C,6EAAgC;QAAA,gEAAI;QAAA,4DAAS;QACjD,4DAAmB;QACvB,4DAAW;QACX,gFACI;QAAA,mFACI;QAAA,kFAAgB;QAAA,sEAAU;QAAA,4DAAiB;QAC3C,qFAAmB;QAAA,wEAAY;QAAA,4DAAoB;QACvD,4DAAkB;QAClB,oFACI;QAAA,qEACJ;QAAA,4DAAmB;QACnB,oFACI;QAAA,6EAAgC;QAAA,iEAAK;QAAA,4DAAS;QAC9C,6EAAgC;QAAA,gEAAI;QAAA,4DAAS;QACjD,4DAAmB;QACvB,4DAAW;QACf,4DAAM;QACV,4DAAM;QAEN,2EACI;QAAA,gFACI;QAAA,yEAAsD;QAAA,iEAAK;QAAA,4DAAI;QAC/D,yEAAuD;QAAA,mEAAO;QAAA,4DAAI;QACxE,4DAAW;QACb,4DAAM;QACN,4DAAM;;6FDzDO,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;;;;;;;ICcpC,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAHJ,wEACI;IAAA,uIACI;IAER,qEAAe;;;;IAHsB,0DAAuH;IAAvH,yMAAuH;;;IAcxJ,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAHJ,wEACI;IAAA,uIACI;IAER,qEAAe;;;;IAHsB,0DAAgI;IAAhI,kNAAgI;;ADjB1L,MAAM,cAAc;IAKzB,YAAoB,WAAwB,EAAU,GAAe,EAAU,MAAc;QAAzE,gBAAW,GAAX,WAAW,CAAa;QAAU,QAAG,GAAH,GAAG,CAAY;QAAU,WAAM,GAAN,MAAM,CAAQ;QA2B7F,sDAAsD;QACtD,mBAAc,GAAG;YACf,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACnD,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE;aACpD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,2CAA2C,EAAE;aAC5E;SACF;IArC+F,CAAC;IACjG,gFAAgF;IAChF,SAAS,CAAC,WAAiB;QACzB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAG,WAAW,KAAK,IAAI,EAAC;YACtB,IAAI,CAAC,UAAU,GAAG;gBAChB,UAAU,EAAC,WAAW,CAAC,KAAK;gBAC5B,UAAU,EAAC,WAAW,CAAC,QAAQ;aAChC;YAED,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAC3C,IAAI,CAAC,EAAE;gBAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC1B,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBAChC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACrC,CAAC,EACC,KAAK,CAAC,EAAE;gBACN,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC7C,IAAG,KAAK,CAAC,MAAM,IAAI,GAAG,EAAC;oBACrB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;iBAC9B;YACH,CAAC,CAAC;SACL;IAEH,CAAC;IAcD,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;YACpD,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAE/D,CAAC,CAAC;IACL,CAAC;;4EAlDU,cAAc;8FAAd,cAAc;QCZ3B,yEACI;QAAA,yEACI;QAAA,8EACI;QAAA,kFACI;QAAA,oFAAkC;QAAA,gEAAK;QAAA,4DAAiB;QAC5D,4DAAkB;QAClB,sFACI;QAAA,0EACI;QAD0B,0IAAY,kCAA0B,IAAC;QACjE,sEACA;QAAA,oFACI;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,uEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,8HACI;QAIR,4DAAM;QACV,4DAAM;QAEN,uEACA;QAAA,qFACI;QAAA,6EAAW;QAAA,+EAAmB;QAAA,4DAAY;QAC1C,uEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,8HACI;QAIJ,4EAAqB;QAAA,wDAAa;QAAA,4DAAO;QAC7C,4DAAM;QACV,4DAAM;QACN,8EAA4F;QAAA,iEAAK;QAAA,4DAAS;QAC1G,yEAA+D;QAAA,kEAAM;QAAA,4DAAI;QAC7E,4DAAO;QACX,4DAAmB;QACnB,oFACI;QAAA,yEAA4C;QAAA,2EAAe;QAAA,4DAAI;QACnE,4DAAmB;QACvB,4DAAW;QACf,4DAAM;QACV,4DAAM;;QAtCgB,0DAAuB;QAAvB,oFAAuB;QAOH,0DAA0C;QAA1C,6FAA0C;QAc1C,0DAA6C;QAA7C,gGAA6C;QAKtC,0DAAa;QAAb,8EAAa;QAGF,0DAA6B;QAA7B,0FAA6B;;6FDxB5E,cAAc;cAN1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,wBAAwB;gBACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAGkB;;;;;;;;;;;;;;ICM5D,sEACI;IAAA,0EACI;IAD+B,0TAAyB;IACxD,oFACI;IAAA,2EACJ;IAD+E,qVAA8C;IAAzH,4DACJ;IAAA,4DAAiB;IACjB,4EAAyF;IAAA,+DAAI;IAAA,4DAAS;IAC1G,4DAAO;IAEP,0EACI;IADmC,8TAA6B;IAChE,oFACI;IAAA,4EACJ;IADuF,yVAAkD;IAArI,4DACJ;IAAA,4DAAiB;IACjB,4EAA4F;IAAA,gEAAI;IAAA,4DAAS;IAC7G,4DAAO;IACX,4DAAM;;;IAbI,0DAA4B;IAA5B,4FAA4B;IAEc,0DAAkC;IAAlC,2GAAkC;IAEtC,0DAAkC;IAAlC,kGAAkC;IAGxE,0DAAgC;IAAhC,gGAAgC;IAEc,0DAAsC;IAAtC,+GAAsC;IAE9C,0DAAsC;IAAtC,sGAAsC;;;IAQ1F,+EACI;IAAA,kFACI;IAAA,iFAAgB;IAAA,uDAAe;IAAA,4DAAiB;IAChD,oFAAmB;IAAA,uDAAmC;IAAA,4DAAoB;IAC9E,4DAAkB;IAClB,mFACI;IAAA,iEAAW;IACX,qEACJ;IAAA,4DAAmB;IACnB,mFACI;IAAA,8EAAgC;IAAA,iEAAK;IAAA,4DAAS;IAClD,4DAAmB;IACvB,4DAAW;;;IAVa,0DAAe;IAAf,+EAAe;IACZ,0DAAmC;IAAnC,4GAAmC;IAItC,0DAA6C;IAA7C,wLAA6C;;;IARzE,0EACI;IAAA,+HACI;;IAYR,4DAAM;;;IAbQ,0DAAuC;IAAvC,uJAAuC;;ADjB9C,MAAM,gBAAgB;IAY3B,YAAoB,cAA8B,EAAU,KAAa,EAAU,GAAe,EAAU,WAAwB;QAAhH,mBAAc,GAAd,cAAc,CAAgB;QAAU,UAAK,GAAL,KAAK,CAAQ;QAAU,QAAG,GAAH,GAAG,CAAY;QAAU,gBAAW,GAAX,WAAW,CAAa;QA8BpI,mBAAc,GAAG;YACf,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACnD,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE;aACpD;SACF;IAnCuI,CAAC;IAEzI,UAAU;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACtB,IAAG,IAAI,CAAC,gBAAgB,IAAI,SAAS,EAAC;YACtC,IAAI,CAAC,WAAW,GAAG;gBACjB,OAAO,EAAE,IAAI,CAAC,KAAK;gBACnB,MAAM,EAAE,IAAI,CAAC,gBAAgB;aAC9B;YACD,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAE,IAAI,CAAC,EAAE;gBACtD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;SACJ;aACG;YAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;SAAC;IAC1C,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAG,IAAI,CAAC,oBAAoB,IAAI,SAAS,EAAC;YAC1C,IAAI,CAAC,WAAW,GAAG;gBACjB,OAAO,EAAE,IAAI,CAAC,KAAK;gBACnB,UAAU,EAAE,IAAI,CAAC,oBAAoB;aACtC;YACD,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAE,IAAI,CAAC,EAAE;gBAC1D,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;YACxD,CAAC,CAAC;SACH;aACG;YAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;SAAC;IACtC,CAAC;IASD,cAAc;QACZ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChE,CAAC;IAED,QAAQ;QACN,wBAAwB;QAExB,IAAI,CAAC,WAAW,GAAG;YACjB,OAAO,EAAE,IAAI,CAAC,KAAK;SACpB;QAED,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAE,IAAI,CAAC,EAAE;YACnD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAE9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBAC3C,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;aAC9E,CAAC,CAAC;YAEH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBAC/C,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;aACtE,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;;gFAzEU,gBAAgB;gGAAhB,gBAAgB;QCZ7B,wEAAyB;QACzB,yEACA;QAAA,yEACI;QAAA,8EACI;QAAA,kFACI;QAAA,iFAAgB;QAAA,kEAAO;QAAA,4DAAiB;QAC5C,4DAAkB;QAClB,mFACA;QAAA,sEAAK;QAAA,oEAAuD;QAAA,4DAAM;QAClE,+GACI;QAcJ,4DAAmB;QACvB,4DAAW;QACf,4DAAM;QAEN,8GACI;QAcJ,4DAAM;;QAlCO,2DAAyB;QAAzB,uFAAyB;QAmBjC,0DAAyB;QAAzB,uFAAyB;;6FDhBjB,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;;;;;;;;;;;;;AEXD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,iBAAiB;IAE5B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;kFALU,iBAAiB;iGAAjB,iBAAiB;QCP9B,oEAAG;QAAA,2EAAgB;QAAA,4DAAI;;6FDOV,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;AEND;AAAA;AAAO,MAAM,UAAU;CAItB;;;;;;;;;;;;;ACJD;AAAA;AAAO,MAAM,SAAS;CAMrB;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAGlD,6CAA6C;AAC7C,2CAA2C;AACH;AACE;;;;;;;;;;;;;ICMlC,2EACI;IAAA,kFACI;IAAA,iFAAgB;IAAA,uDAAe;IAAA,4DAAiB;IAChD,oFAAmB;IAAA,uDAA6B;IAAA,4DAAoB;IACpE,oFAAmB;IAAA,uDAAyB;IAAA,4DAAoB;IACpE,4DAAkB;IAClB,mFACI;IAAA,oEACJ;IAAA,4DAAmB;IACnB,oFACI;IAAA,6EAAgC;IAAA,iEAAK;IAAA,4DAAS;IAC9C,6EAAuD;IAAA,gEAAI;IAAA,4DAAS;IACxE,4DAAmB;IACvB,4DAAW;;;IAXa,0DAAe;IAAf,+EAAe;IACZ,0DAA6B;IAA7B,sGAA6B;IAC7B,0DAAyB;IAAzB,kGAAyB;IAGvC,0DAA6C;IAA7C,wLAA6C;;ADN3D,MAAM,gBAAgB;IAS3B,YAAoB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;QAPnC,YAAO,GAAqB,EAAE,CAAC;QAE/B,YAAO,GAAsB,EAAE,CAAC;IAOhC,CAAC;IAED,QAAQ;QAEN,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,CAAC,SAAS,CACtC,IAAI,GAAE;YACJ,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAG,IAAI,EAAE,CAAC,EAAE,EAAC;gBAC/B,IAAI,SAAS,GAAG,IAAI,sDAAU,EAAE,CAAC;gBACjC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC1B,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;gBAClC,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;gBACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAE9B;QACH,CAAC,EACD,KAAK,CAAC,EAAE;YACN,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,SAAS,CAChC,IAAI,CAAC,EAAE;YACL,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAE,IAAI,EAAE,CAAC,EAAE,EAC/B;gBACE,IAAI,SAAS,GAAG,IAAI,oDAAS,EAAE,CAAC;gBAChC,SAAS,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC1B,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC9B,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;gBAC5C,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBAEpC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACV,IAAI,KAAK,GAAG,CAAC,CAAC;gBAEd,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAE,IAAI,EAAE,CAAC,EAAE,EAAC;oBACvC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAC1C;wBACE,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;wBACvC,CAAC,GAAG,CAAC,GAAC,CAAC,CAAC;qBACT;iBACF;gBAED,IAAI,CAAC,IAAI,CAAC,EAAC;oBACT,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;iBACtB;qBACG;oBACF,SAAS,CAAC,MAAM,GAAG,KAAK,GAAC,CAAC,CAAC;iBAC5B;gBACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAE7B,+BAA+B;aAChC;YACC,0BAA0B;QAChC,CAAC,EACC,KAAK,CAAC,EAAE;YACN,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC,CAAC;IAEN,CAAC;IAED,WAAW,CAAC,WAAgB;QAC1B,IAAG,WAAW,IAAI,SAAS,EAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAE,IAAI,CAAC,EAAE;gBACzD,IAAI,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;gBAC9C,IAAG,cAAc,IAAI,CAAC,EACtB;oBACE,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC;iBAC9C;qBACG;oBACF,+FAA+F;oBAC/F,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;iBACnB;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;;gFAvFU,gBAAgB;gGAAhB,gBAAgB;QCb7B,wEAAyB;QAEzB,oFACI;QAAA,4EAAW;QAAA,iEAAM;QAAA,4DAAY;QAC7B,2EACA;QAD4B,6LAAgD;QAA5E,4DACA;QAAA,4EACE;QAD6B,wIAAS,uCAA+B,IAAC;QACtE,2EAAU;QAAA,iEAAM;QAAA,4DAAW;QAC7B,4DAAS;QACb,4DAAiB;QAEjB,yEACI;QAAA,yEACI;QAAA,yHACI;QAaR,4DAAM;QACV,4DAAM;;QAfY,2DAA8B;QAA9B,gFAA8B;;6FDCnC,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;;;;;;;;;;;;;AEZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;;;;;;;ICcpC,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAHJ,wEACI;IAAA,+IACI;IAER,qEAAe;;;;IAHsB,0DAA+I;IAA/I,iOAA+I;;;IAchL,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAHJ,wEACI;IAAA,+IACI;IAER,qEAAe;;;;IAHsB,0DAAwJ;IAAxJ,0OAAwJ;;;IAcrL,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAHJ,wEACI;IAAA,+IACI;IAER,qEAAe;;;;IAHsB,0DAA6K;IAA7K,+PAA6K;;ADhC3O,MAAM,sBAAsB;IAMjC,YAAoB,WAAwB,EAAU,GAAe,EAAU,MAAc;QAAzE,gBAAW,GAAX,WAAW,CAAa;QAAU,QAAG,GAAH,GAAG,CAAY;QAAU,WAAM,GAAN,MAAM,CAAQ;QA+B7F,sDAAsD;QACtD,mBAAc,GAAG;YACf,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACnD,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE;aACpD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,2CAA2C,EAAE;aAC5E;YACD,iBAAiB,EAAE;gBACjB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,2CAA2C,EAAE;aAC5E;SACF;IA7CgG,CAAC;IAElG,gFAAgF;IAChF,aAAa,CAAC,WAAiB;QAC7B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,EAAC;YAC5I,IAAI,CAAC,UAAU,GAAG;gBAChB,UAAU,EAAE,WAAW,CAAC,KAAK;gBAC7B,UAAU,EAAE,WAAW,CAAC,QAAQ;aACjC;YACD,IAAG,IAAI,CAAC,UAAU,IAAI,IAAI,EAAC;gBACzB,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAC/C,GAAG,EAAE,GAAE,CAAC,EACR,KAAK,CAAC,EAAE;oBACN,IAAG,KAAK,CAAC,MAAM,IAAI,GAAG,EAAC;wBACrB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;qBAC9B;yBAED;wBACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC,CAAC,CAAC;qBACtF;gBACH,CAAC,CAAC;aACL;SACF;aAED;YACE,IAAI,CAAC,SAAS,GAAG,wBAAwB,CAAC;SAC3C;IACH,CAAC;IAkBD,QAAQ;QACN,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC9C,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;YACpD,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACtE,CAAC,CAAC;IACL,CAAC;IAED,6BAA6B;IAC7B,gBAAgB,CAAC,aAAqB,EAAE,cAAsB;QAC5D,IAAI,aAAa,KAAK,cAAc,EAAE;YAClC,OAAO,KAAK,CAAC;SAChB;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACL,CAAC;;4FApEY,sBAAsB;sGAAtB,sBAAsB;QCXnC,yEACI;QAAA,yEACI;QAAA,8EACI;QAAA,kFACI;QAAA,oFAAkC;QAAA,yEAAc;QAAA,4DAAiB;QACrE,4DAAkB;QAClB,sFACI;QAAA,0EACI;QADkC,kJAAY,8CAAsC,IAAC;QACrF,sEACA;QAAA,oFACI;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,uEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,sIACI;QAIR,4DAAM;QACV,4DAAM;QAEN,uEACA;QAAA,qFACI;QAAA,6EAAW;QAAA,+EAAmB;QAAA,4DAAY;QAC1C,uEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,sIACI;QAIR,4DAAM;QACV,4DAAM;QAEN,uEACI;QAAA,qFACI;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,wEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,sIACI;QAIJ,4EAAqB;QAAA,wDAAa;QAAA,4DAAO;QAC7C,4DAAM;QACd,4DAAM;QAEN,8EAAoG;QAAA,kEAAM;QAAA,4DAAS;QACnH,yEAA+D;QAAA,kEAAM;QAAA,4DAAI;QAC7E,4DAAO;QACX,4DAAmB;QACvB,4DAAW;QACf,4DAAM;QACV,4DAAM;;QAlDgB,0DAA+B;QAA/B,4FAA+B;QAOX,0DAA0C;QAA1C,6FAA0C;QAc1C,0DAA6C;QAA7C,gGAA6C;QAczC,0DAAoD;QAApD,uGAAoD;QAK7C,0DAAa;QAAb,8EAAa;QAIN,0DAAqC;QAArC,kGAAqC;;6FDxCpF,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;AAS3C,MAAM,qBAAqB;IAEhC,YAAoB,KAAqB,EAAU,MAAc;QAA7C,UAAK,GAAL,KAAK,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEtE,QAAQ;QACN,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;;0FANU,qBAAqB;qGAArB,qBAAqB;QCTlC,yEACI;QAAA,yEACI;QAAA,8EACI;QAAA,kFACI;QAAA,oFAAkC;QAAA,sFAA2B;QAAA,4DAAiB;QAClF,4DAAkB;QAClB,sFACQ;QAAA,oEAAG;QAAA,uEAAY;QAAA,4DAAI;QACnB,uEAA+D;QAAA,iEAAK;QAAA,4DAAI;QAChF,4DAAmB;QACvB,4DAAW;QACf,4DAAM;QACV,4DAAM;;6FDHO,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;;;;;;;;;;;;;AERD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;;;;;;;;;;;;ICcpC,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAHJ,wEACI;IAAA,wIACI;IAER,qEAAe;;;;IAHsB,0DAAuH;IAAvH,yMAAuH;;;IAcxJ,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,4FACJ;;;IAHJ,wEACI;IAAA,wIACI;IAER,qEAAe;;;;IAHsB,0DAA0H;IAA1H,4MAA0H;;;IAc3J,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,6FACJ;;;IAHJ,wEACI;IAAA,wIACI;IAER,qEAAe;;;;IAHsB,0DAAmI;IAAnI,sNAAmI;;;IAapK,gFACI;IAAA,uDACJ;IAAA,4DAAY;;;IADR,0DACJ;IADI,6FACJ;;;IAHJ,wEACI;IAAA,wIACI;IAER,qEAAe;;;;IAHsB,0DAAwJ;IAAxJ,2OAAwJ;;AD7ClN,MAAM,eAAe;IAK1B,YAAoB,WAAwB,EAAU,GAAe,EAAU,MAAc;QAAzE,gBAAW,GAAX,WAAW,CAAa;QAAU,QAAG,GAAH,GAAG,CAAY;QAAU,WAAM,GAAN,MAAM,CAAQ;QA8B7F,sDAAsD;QACtD,mBAAc,GAAG;YACf,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,wBAAwB,EAAE;gBACvD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,kCAAkC,EAAE;aACjE;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACnD,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,uBAAuB,EAAE;aACpD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,2CAA2C,EAAE;aAC5E;YACD,iBAAiB,EAAE;gBACjB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,2CAA2C,EAAE;aAC5E;SACF;IAhD+F,CAAC;IAEjG,uFAAuF;IACvF,aAAa,CAAC,UAAe;QAC3B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,EAAC;YAC9H,IAAI,CAAC,OAAO,GAAG;gBACb,MAAM,EAAE,UAAU,CAAC,IAAI;gBACvB,UAAU,EAAE,UAAU,CAAC,KAAK;gBAC5B,UAAU,EAAE,UAAU,CAAC,QAAQ;aAChC;YACD,IAAG,IAAI,CAAC,OAAO,IAAI,IAAI,EAAC;gBACtB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CACzC,IAAI,CAAC,EAAE;oBAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACnC,CAAC,EACH,KAAK,CAAC,EAAE;oBACN,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC7C,IAAG,KAAK,CAAC,MAAM,IAAI,GAAG,EAAC;wBACrB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;qBAC9B;gBACH,CAAC,CAAC;aACL;SACF;aAED;YACE,IAAI,CAAC,SAAS,GAAG,wBAAwB,CAAC;SAC3C;IACH,CAAC;IAsBD,QAAQ;QACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YACnE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC;YACpD,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACtE,CAAC,CAAC;IACL,CAAC;IAED,6BAA6B;IAC7B,gBAAgB,CAAC,aAAqB,EAAE,cAAsB;QACxD,IAAI,aAAa,KAAK,cAAc,EAAE;YACpC,wFAAwF;YACtF,OAAO,KAAK,CAAC;SAChB;aAAM;YACL,uEAAuE;YACvE,OAAO,IAAI,CAAC;SACb;IACL,CAAC;;8EAzEQ,eAAe;+FAAf,eAAe;QCX5B,yEACI;QAAA,yEACI;QAAA,8EACI;QAAA,kFACI;QAAA,oFAAkC;QAAA,kEAAO;QAAA,4DAAiB;QAC9D,4DAAkB;QAClB,sFACI;QAAA,0EACI;QAD2B,2IAAY,uCAA+B,IAAC;QACvE,sEACA;QAAA,oFACI;QAAA,6EAAW;QAAA,gFAAoB;QAAA,4DAAY;QAC3C,uEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,+HACI;QAIR,4DAAM;QACV,4DAAM;QAEN,uEACA;QAAA,qFACI;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,uEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,+HACI;QAIR,4DAAM;QACV,4DAAM;QAEN,uEACA;QAAA,qFACI;QAAA,6EAAW;QAAA,+EAAmB;QAAA,4DAAY;QAC1C,wEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,+HACI;QAIR,4DAAM;QACV,4DAAM;QACN,uEACA;QAAA,qFACI;QAAA,6EAAW;QAAA,4EAAgB;QAAA,4DAAY;QACvC,wEACJ;QAAA,4DAAiB;QACb,uEACI;QAAA,+HACI;QAIJ,4EAAqB;QAAA,wDAAa;QAAA,4DAAO;QAC7C,4DAAM;QACV,4DAAM;QACN,8EAA4F;QAAA,mEAAO;QAAA,4DAAS;QAE5G,yEAAqE;QAAA,kEAAM;QAAA,4DAAI;QACnF,4DAAO;QACX,4DAAmB;QACvB,4DAAW;QACf,4DAAM;QACV,4DAAM;;QA/DgB,0DAAwB;QAAxB,qFAAwB;QAOJ,0DAAyC;QAAzC,4FAAyC;QAczC,0DAA0C;QAA1C,6FAA0C;QAc1C,0DAA6C;QAA7C,gGAA6C;QAa7C,0DAAoD;QAApD,uGAAoD;QAK7C,0DAAa;QAAb,8EAAa;QAGF,0DAA8B;QAA9B,2FAA8B;;6FDpD7E,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAA2C;AAKM;;;AAM1C,MAAM,UAAU;IAErB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC;;OAEG;IACH,iBAAiB;IACjB,UAAU,CAAC,OAAa;QACtB,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAC,CAAE,EAAE,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8DAA8D,EAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAC7G,CAAC;IAED,SAAS,CAAC,WAAiB;QACzB,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,yDAAyD,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IAC7G,CAAC;IAED,aAAa,CAAC,WAAiB;QAC7B,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iEAAiE,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACpH,CAAC;IAED,OAAO,CAAC,KAAU;QAChB,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAC,CAAE,EAAE,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,2DAA2D,EAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IACxG,CAAC;IAED,UAAU,CAAC,WAAiB;QAC1B,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,8DAA8D,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACjH,CAAC;IAED,cAAc,CAAC,WAAiB;QAC9B,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kEAAkE,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IACrH,CAAC;IAED,gBAAgB,CAAC,KAAU;QACzB,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAQ,oEAAoE,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;IACzH,CAAC;IAED,uBAAuB,CAAC,KAAU;QAChC,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,0EAA0E,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;IACxH,CAAC;IAED;;OAEG;IAGL;;MAEE;IACF,aAAa;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mEAAmE,CAAC,CAAC;IAC5F,CAAC;IAED,gBAAgB,CAAC,QAAgB;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uEAAuE,GAAG,QAAQ,CAAC,CAAC;IAC3G,CAAC;IAED,eAAe,CAAC,MAAc;QAC5B,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kEAAkE,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IACjH,CAAC;IAED,qBAAqB,CAAC,MAAoB;QACxC,MAAM,WAAW,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAC,CAAC;QACzF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wEAAwE,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IACvH,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,yEAAyE,CAAC,CAAC;IAClG,CAAC;IAED,kBAAkB,CAAC,IAAS;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,yEAAyE,GAAG,IAAI,CAAC,CAAC;IACzG,CAAC;;oEAhFY,UAAU;6FAAV,UAAU,WAAV,UAAU,mBAFT,MAAM;6FAEP,UAAU;cAHtB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACVD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { IndexComponent } from './pages/index/index.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { ProfileComponent } from './pages/profile/profile.component';\nimport { RatingsComponent } from './pages/ratings/ratings.component';\nimport { ResetPasswordComponent } from './pages/reset-password/reset-password.component';\nimport { ResetSuccessComponent } from './pages/reset-success/reset-success.component';\nimport { RateFormComponent } from './pages/rate-form/rate-form.component';\nimport { CreateComponent } from './pages/create/create.component';\n\n\nconst routes: Routes = [\n  {path: 'index', component: IndexComponent},\n  {path: 'signup', component: SignupComponent},\n  {path: 'login', component: LoginComponent},\n  {path: 'profile', component: ProfileComponent},\n  {path: 'ratings', component: RatingsComponent},\n  {path: 'resetPassword', component: ResetPasswordComponent},\n  {path: 'resetSuccess', component: ResetSuccessComponent},\n  {path: 'rateForm', component: RateFormComponent},\n  {path: 'create', component: CreateComponent},\n\n    // otherwise redirect to home\n  { path: '', redirectTo: '/index', pathMatch: 'full' },\n  { path: '**', component: IndexComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'prometheus-puzzles';\n  \n  constructor() {\n  }\n\n}\n","<img src=\"assets/images/logo.jpg\">\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {NgxPaginationModule} from 'ngx-pagination';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n//\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport { MatToolbarModule} from '@angular/material/toolbar';\nimport { MatTableModule} from '@angular/material/table';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatGridListModule } from '@angular/material/grid-list'\nimport { MatRadioModule } from '@angular/material/radio';\nimport {MatListModule} from '@angular/material/list';\n\n//import { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\n//pages\nimport { IndexComponent } from './pages/index/index.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { ProfileComponent } from './pages/profile/profile.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { RatingsComponent } from './pages/ratings/ratings.component';\nimport { ResetPasswordComponent } from './pages/reset-password/reset-password.component';\nimport { ResetSuccessComponent } from './pages/reset-success/reset-success.component';\nimport { RateFormComponent } from './pages/rate-form/rate-form.component';\nimport { CreateComponent } from './pages/create/create.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    IndexComponent,\n    SignupComponent,\n    LoginComponent,\n    ProfileComponent,\n    RatingsComponent,\n    NavbarComponent,\n    ResetPasswordComponent,\n    ResetSuccessComponent,\n    RateFormComponent,\n    CreateComponent,\n  ],\n  imports: [\n    BrowserModule,\n    NgxPaginationModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatIconModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatToolbarModule,\n    MatTableModule,\n    HttpClientModule,\n    HttpModule,\n    FormsModule,\n    MatInputModule, MatListModule,\n    MatCardModule, MatFormFieldModule, MatDialogModule, MatGridListModule, MatRadioModule, ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n//import { getName } from '.././pages/login/login.component';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  name:string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.name = localStorage.getItem('name');\n  }\n\n}\n","<div class=\"row\">\n  <nav class=\"navbar justify-content-center\">\n    <div class=\"container\">\n        <ul class=\"nav navbar-nav mr-auto\" routerLinkActive=\"active\">\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"/ratings\">View</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"/create\">Create</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"\">Profile</a></li>\n        </ul>\n        <span class=\"navbar-text\">\n            Hello, {{name}}\n        </span>\n    </div>\n  </nav>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-navbar></app-navbar>\n<p>create works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-index',\n  templateUrl: './index.component.html',\n  styleUrls: ['./index.component.css']\n})\nexport class IndexComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"content\">\n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"descText\">\n    <mat-card fxFlex=\"90\">\n            <p>Puzzles have been a hobby of many people over the centuries, coming in various\n            forms which have various ways of solving. Puzzles have played a role in people’s\n            problem solving skills. Puzzle generators have allowed for more puzzles to be\n            created, using various techniques to create interesting and challenging puzzles.\n            The system requested by the client involves the creation of 3-Dimensional puzzles (manually and from the use of AI), testing of puzzles, sharing and rating of\n            puzzles by other users, as well as the ability of downloading 3D printable files.\n            Team Prometheus, has come up with a way to develop the system according to\n            the client’s specifications.</p>\n  </mat-card>\n</div>\n\n<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\" >\n        <mat-card  class=\"child-1\">\n            <mat-card-header>\n                <mat-card-title>Puzzle One</mat-card-title>\n                <mat-card-subtitle>Created by X</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img class=\"indexImg\" src=\"assets/images/imgC.jpg\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\">RATE</button>\n            </mat-card-actions>\n        </mat-card>\n        <mat-card  class=\"child-2\">\n            <mat-card-header>\n                <mat-card-title>Puzzle One</mat-card-title>\n                <mat-card-subtitle>Created by X</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img class=\"indexImg\"  src=\"assets/images/imgB.jpg\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\">RATE</button>\n            </mat-card-actions>\n        </mat-card>\n        <mat-card class=\"child-3\">\n            <mat-card-header>\n                <mat-card-title>Puzzle One</mat-card-title>\n                <mat-card-subtitle>Created by X</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img class=\"indexImg\"  src=\"assets/images/imgC.jpg\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\">RATE</button>\n            </mat-card-actions>\n        </mat-card> \n    </div>\n</div>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"indexNavBtns\">\n    <mat-card fxFlex=\"90\" fxLayoutAlign=\"space-evenly center\">\n        <a routerLink=\"/login\" mat-raised-button class=\"btns\">Login</a>\n        <a routerLink=\"/signup\" mat-raised-button class=\"btns\">Sign Up</a>\n  </mat-card>\n</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { APIService } from 'src/app/services/api.service';\nimport { User } from 'src/app/models/User';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  verifyUser: any;\n  formError: string;\n\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router) {}\n  //method for logging in user and getting the token associated with the said user\n  loginUser(currentUser: User){\n    this.formError = '';\n    if(currentUser !== null){\n      this.verifyUser = {\n        \"username\":currentUser.email,\n        \"password\":currentUser.password\n      }\n\n      this.api.loginUser(this.verifyUser).subscribe(\n        data => { console.log(data);\n          localStorage.removeItem('name');\n          localStorage.setItem('name', data['name']);\n          this.formError = \"\";\n        this.router.navigate(['/ratings']);\n      },\n        error => {//if status code other than in the 200 range returned, show error\n          console.log('Error from API: ', error.error);\n          if(error.status >= 401){\n            this.formError = error.error;\n          }\n        })\n    }\n\n  }\n\n  //error messages used during login/register validation\n  error_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ]\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n\n    });\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Login</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser(loginForm.value)\">\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your email</mat-label>\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.email\">\n                                <mat-error class=\"error-message\" *ngIf=\"loginForm.get('email').hasError(error.type) && (loginForm.get('email').dirty || loginForm.get('email').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your password</mat-label>\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.password\">\n                                <mat-error class=\"error-message\" *ngIf=\"loginForm.get('password').hasError(error.type) && (loginForm.get('password').dirty || loginForm.get('password').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                            <span id=\"passError\">{{formError}}</span>\n                        </div>\n                    </div>\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!loginForm.valid\" class=\"btns\" id=\"one\">Login</button>\n                    <a routerLink=\"/index\" mat-raised-button class=\"btns\" id=\"two\">Cancel</a>\n                </form>\n            </mat-card-content>\n            <mat-card-actions>\n                <a routerLink=\"/resetPassword\" class=\"link\">Forgot Password</a>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { APIService } from 'src/app/services/api.service';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { Puzzle } from 'src/app/models/Puzzle';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  nameTextboxValue: string;\n  usernameTextboxValue: string;\n  currentUserObject:any;\n  token: any;\n  currentUser: any;\n  updateNameForm: FormGroup;\n  updateUsernameForm: FormGroup;\n\n  //user  puzzle variables\n  puzzleList: Observable <Puzzle[]> ;\n\n  constructor(private activatedRoute: ActivatedRoute, private route: Router, private api: APIService, private formBuilder: FormBuilder) { }\n\n  updateName(){\n    this.currentUser = null;\n      if(this.nameTextboxValue != undefined){\n      this.currentUser = {\n        \"token\": this.token,\n        \"name\": this.nameTextboxValue\n      }\n      this.api.updateName(this.currentUser).subscribe( data => {\n        this.currentUserObject['name'] = data['name'];\n      });\n    }\n    else{ console.log(\"No value provided\");}\n  }\n\n  updateUsername(){\n    this.currentUser = null;\n    if(this.usernameTextboxValue != undefined){\n    this.currentUser = {\n      \"token\": this.token,\n      \"username\": this.usernameTextboxValue\n    }\n    this.api.updateUsername(this.currentUser).subscribe( data => {\n      this.currentUserObject['username'] = data['username'];\n    })\n  }\n  else{console.log(\"No value provided\")}\n  }\n\n  error_messages = {\n    'username': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ]\n  }\n\n  getUserPuzzles(){\n    this.puzzleList = this.api.getPuzzlesByUser(this.currentUser);\n  }\n\n  ngOnInit(): void {\n    /* Provide token here */\n\n    this.currentUser = {\n      \"token\": this.token\n    }\n\n    this.api.getUser(this.currentUser).subscribe( data => {\n      this.currentUserObject = data;\n\n      this.updateNameForm = this.formBuilder.group({ \n        name: [data['name'], [Validators.required, Validators.pattern('[a-zA-Z ]*')]]\n      });\n\n      this.updateUsernameForm = this.formBuilder.group({ \n        username: [data['username'], [Validators.required, Validators.email]]\n      });\n    });\n\n    this.getUserPuzzles();\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"content\">\n<div class=\"container\" >\n    <mat-card class=\"profile\">\n        <mat-card-header>\n            <mat-card-title>Profile</mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n        <div><img src=\"assets/images/profile.jpg\" id=\"profileImage\"></div>\n        <div *ngIf=\"currentUserObject\">\n            <form [formGroup]=\"updateNameForm\" (ngSubmit)=\"updateName()\"> \n                <mat-form-field appearance=\"fill\">\n                    <input matInput formControlName=\"name\"  value=\"{{currentUserObject.name}}\" (input)=\"nameTextboxValue=$event.target.value\"> \n                </mat-form-field>\n                <button mat-raised-button type=\"submit\" [disabled]=\"!updateNameForm.valid\" class=\"btns\" >Save</button>\n            </form>\n\n            <form [formGroup]=\"updateUsernameForm\" (ngSubmit)=\"updateUsername()\"> \n                <mat-form-field appearance=\"fill\">\n                    <input matInput formControlName=\"username\"  value=\"{{currentUserObject.username}}\" (input)=\"usernameTextboxValue=$event.target.value\"> \n                </mat-form-field>\n                <button mat-raised-button type=\"submit\" [disabled]=\"!updateUsernameForm.valid\" class=\"btns\">Save</button>\n            </form>\n        </div>\n        </mat-card-content>\n    </mat-card>\n</div>\n\n<div *ngIf=\"currentUserObject\" class=\"flex-container\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\">\n    <mat-card *ngFor=\"let puzzle of puzzleList|async\" class=\"userPuzzles\">\n        <mat-card-header>\n            <mat-card-title>{{puzzle.name}}</mat-card-title>\n            <mat-card-subtitle>Description: {{puzzle.description}}</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n            <div></div>\n            <img id=\"image\" src=\"assets/images/puzzles/{{puzzle.id}}.png\">\n        </mat-card-content>\n        <mat-card-actions>\n            <button mat-button class=\"btns\">SHARE</button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n</div>\n\n<!--\n    (input)=\"nameTextboxValue=$event.target.value\"\n-->","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-rate-form',\n  templateUrl: './rate-form.component.html',\n  styleUrls: ['./rate-form.component.css']\n})\nexport class RateFormComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>rate-form works!</p>\n","export class RatingsArr{\n  id: number;\n  rating: number;\n  puzzleID: number;\n}\n","export class PuzzleArr{\n  id: number;\n  name: string;\n  description: string;\n  creator: number;\n  rating: number; \n}\n","import { Component, OnInit } from '@angular/core';\n//import { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { APIService } from 'src/app/services/api.service';\n//import { User } from 'src/app/models/User';\n//import { Router } from '@angular/router';\nimport { PuzzleArr } from './puzzleArr';\nimport { RatingsArr } from './RatingsArr';\n\n@Component({\n  selector: 'app-ratings',\n  templateUrl: './ratings.component.html',\n  styleUrls: ['./ratings.component.css']\n})\nexport class RatingsComponent implements OnInit {\n\n  puzzles: Array<PuzzleArr> = [];\n  name: string;\n  ratings: Array<RatingsArr> = [];\n\n  //searchbar\n  searchTextboxValue: string;\n\n  constructor(private api: APIService) {\n\n  }\n\n  populate()\n  {\n    this.api.getAllPuzzleRatings().subscribe(\n      data=> {\n        for(let i=0; data[i]!= null; i++){\n          let ratingObj = new RatingsArr();\n          ratingObj.id = data[i].id;\n          ratingObj.rating = data[i].rating;\n          ratingObj.puzzleID = data[i].puzzleID;\n          this.ratings.push(ratingObj);\n\n        }\n      },\n      error => {\n        console.log(\"Error from API: \", error.error);\n      });\n\n    this.api.getAllPuzzles().subscribe(\n      data => {\n        for(let i=0; data[i]!=null; i++)\n        {\n          let puzzleObj = new PuzzleArr();\n          puzzleObj.id = data[i].id;\n          puzzleObj.name = data[i].name;\n          puzzleObj.description = data[i].description;\n          puzzleObj.creator = data[i].creator;\n\n          let j = 0;\n          let total = 0;\n\n          for (let k=0; this.ratings[k]!=null; k++){\n            if (this.ratings[k].puzzleID == data[i].id)\n            {\n              total = total + this.ratings[k].rating;\n              j = j+1;\n            }\n          }\n\n          if (j == 0){\n            puzzleObj.rating = 0;\n          }\n          else{\n            puzzleObj.rating = total/j;\n          }\n          this.puzzles.push(puzzleObj);\n\n          //console.log(this.puzzles[i]);\n        }\n          //this.puzzles.push(data);\n    },\n      error => {//if status code other than in the 200 range returned, show error\n        console.log('Error from API: ', error.error);\n      })\n\n  }\n\n  searchItems(searchValue: any){\n    if(searchValue != undefined){\n      this.api.getSearchedPuzzles(searchValue).subscribe( data => {\n        var dataObjectSize = Object.keys(data).length;\n        if(dataObjectSize == 0 )\n        {\n          console.log(\"Nothing matches given criteria\")\n        }\n        else{\n          //Please populate the page with the data received. Other puzzles not fromd data must be cleared\n          console.log(data);\n        }\n      });\n    }\n  }\n\n  ngOnInit(): void {\n    this.populate();\n  }\n\n}\n","<app-navbar></app-navbar>\n\n<mat-form-field class=\"example-form-field\">\n    <mat-label>Search</mat-label>\n    <input matInput type=\"text\" (input)=\"searchTextboxValue=$event.target.value\">\n    <button mat-button matSuffix   (click)=\"searchItems(searchTextboxValue)\">\n      <mat-icon>search</mat-icon>\n    </button>\n</mat-form-field>\n\n<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-evenly center\">\n        <mat-card *ngFor=\"let puzzle of puzzles\">\n            <mat-card-header>\n                <mat-card-title>{{puzzle.name}}</mat-card-title>\n                <mat-card-subtitle>Created by {{puzzle.creator}}</mat-card-subtitle>\n                <mat-card-subtitle>Rating: {{puzzle.rating}}</mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <img src=\"assets/images/puzzles/{{puzzle.id}}.png\">\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button class=\"btns\">SOLVE</button>\n                <button mat-button class=\"btns\" routerLink=\"/rateForm\">RATE</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { APIService } from 'src/app/services/api.service';\nimport { User } from 'src/app/models/User';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n  resetPasswordForm: FormGroup;\n  verifyUser: any;\n  formError: string;\n  resetDone: string;\n\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router ) {}\n\n  //method for logging in user and getting the token associated with the said user\n  resetPassword(currentUser: User){\n    this.resetDone = '';\n    this.formError = '';\n    if(this.doPasswordsMatch(this.resetPasswordForm.controls['password'].value, this.resetPasswordForm.controls['confirmPassword'].value) == true){\n      this.verifyUser = {\n        \"username\": currentUser.email,\n        \"password\": currentUser.password\n      }\n      if(this.verifyUser != null){\n        this.api.resetPassword(this.verifyUser).subscribe(\n          () => {},\n          error => {//if status code other than in the 200 range returned, show error\n            if(error.status >= 401){\n              this.formError = error.error;\n            }\n            else\n            {\n              this.router.navigate(['/resetSuccess', { message: \"Password reset. Please login\" }]);\n            }\n          })\n      }\n    }\n    else\n    {\n      this.formError = \"Passwords do not match\";\n    }\n  }\n\n  //error messages used during login/register validation\n  error_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n    'confirmPassword': [\n      { type: 'required', message: 'password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n  }\n\n  ngOnInit() {\n    this.resetPasswordForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  //checking if passwords match\n  doPasswordsMatch(firstPassword: string, secondPassword: string) {\n    if (firstPassword !== secondPassword) {\n        return false;\n    } else {\n      return true;\n    }\n}\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Reset Password</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"resetPassword(resetPasswordForm.value)\"> \n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your email</mat-label>\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.email\">\n                                <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('email').hasError(error.type) && (resetPasswordForm.get('email').dirty || resetPasswordForm.get('email').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your password</mat-label>\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.password\">\n                                <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('password').hasError(error.type) && (resetPasswordForm.get('password').dirty || resetPasswordForm.get('password').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                        <mat-form-field appearance=\"fill\">\n                            <mat-label>Confirm password</mat-label>\n                            <input class=\"input\" matInput  required formControlName=\"confirmPassword\" type=\"password\">\n                        </mat-form-field> \n                            <div>\n                                <ng-container *ngFor=\"let error of error_messages.confirmPassword\">\n                                    <mat-error class=\"error-message\" *ngIf=\"resetPasswordForm.get('confirmPassword').hasError(error.type) && (resetPasswordForm.get('confirmPassword').dirty || resetPasswordForm.get('confirmPassword').touched)\">\n                                        {{ error.message }}\n                                    </mat-error>\n                                </ng-container>\n                                <span id=\"passError\">{{formError}}</span>\n                            </div> \n                    </div>\n\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!resetPasswordForm.valid\" class=\"btns\" id=\"one\">Submit</button>\n                    <a routerLink=\"/index\" mat-raised-button class=\"btns\" id=\"two\">Cancel</a>\n                </form>  \n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-reset-success',\n  templateUrl: './reset-success.component.html',\n  styleUrls: ['./reset-success.component.css']\n})\nexport class ResetSuccessComponent implements OnInit {\n\n  constructor(private route: ActivatedRoute, private router: Router ) {}\n\n  ngOnInit() {\n    let message = this.route.snapshot.paramMap.get('message');\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Reset Password Successfully</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                    <p>Please login</p>\n                    <a routerLink=\"/login\" mat-raised-button class=\"btns\" id=\"two\">Login</a>\n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\nimport { User } from '../../models/User';\nimport { APIService } from '../../services/api.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  signUpForm: FormGroup;\n  newUser: any;\n  formError: string;\n\n  constructor(private formBuilder: FormBuilder, private api: APIService, private router: Router) {}\n\n  //method for creating a new user. A new JSON object is created and sent to the node api\n  createNewUser(createUser: any){\n    this.formError = '';\n    if(this.doPasswordsMatch(this.signUpForm.controls['password'].value, this.signUpForm.controls['confirmPassword'].value) == true){\n      this.newUser = {\n        \"name\": createUser.name,\n        \"username\": createUser.email,\n        \"password\": createUser.password\n      }\n      if(this.newUser != null){\n        this.api.createUser(this.newUser).subscribe(\n          data => {console.log(data);\n              this.router.navigate(['/login']);\n            },\n          error => {//if status code other than in the 200 range returned, show error\n            console.log('Error from API: ', error.error);\n            if(error.status >= 401){\n              this.formError = error.error;\n            }\n          })\n      }\n    }\n    else\n    {\n      this.formError = \"Passwords do not match\";\n    }\n  }\n\n  //error messages used during login/register validation\n  error_messages = {\n    'name': [\n      { type: 'required', message: 'Full name is required.' },\n      { type: 'pattern', message: 'Name can only consist of letters' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'email', message: 'Invalid email format.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n    'confirmPassword': [\n      { type: 'required', message: 'password is required.' },\n      { type: 'minlength', message: 'Password must have at least 6 characters.' }\n    ],\n  }\n\n  ngOnInit() {\n    this.signUpForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  //checking if passwords match\n  doPasswordsMatch(firstPassword: string, secondPassword: string) {\n        if (firstPassword !== secondPassword) {\n          //this.formError = \"Passwords do not match: \" + controlName + \" \" + matchingControlName;\n            return false;\n        } else {\n          //this.formError = \"Match: \" + controlName + \" \" + matchingControlName;\n          return true;\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div class=\"flex-container\" fxLayout=\"row\" fxLayout.xs=\"column\" fxLayoutAlign=\"center none\">\n        <mat-card class=\"regForm\">\n            <mat-card-header>\n                <mat-card-title class=\"cardTitle\">Sign Up</mat-card-title>\n            </mat-card-header>\n            <mat-card-content class=\"regFormContent\">\n                <form [formGroup]=\"signUpForm\" (ngSubmit)=\"createNewUser(signUpForm.value)\"> \n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your full name</mat-label>\n                        <input class=\"input\" matInput placeholder=\"John Doe\" formControlName=\"name\" required >\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.name\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('name').hasError(error.type) && (signUpForm.get('name').dirty || signUpForm.get('name').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div> \n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your email</mat-label>\n                        <input class=\"input\" matInput placeholder=\"john@doe.com\" formControlName=\"email\" required>\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.email\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('email').hasError(error.type) && (signUpForm.get('email').dirty || signUpForm.get('email').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Enter your password</mat-label>\n                        <input class=\"input\" matInput required formControlName=\"password\" type=\"password\">\n                    </mat-form-field>\n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.password\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('password').hasError(error.type) && (signUpForm.get('password').dirty || signUpForm.get('password').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                        </div>\n                    </div>\n                    <div>\n                    <mat-form-field appearance=\"fill\">\n                        <mat-label>Confirm password</mat-label>\n                        <input class=\"input\" matInput  required formControlName=\"confirmPassword\" type=\"password\">\n                    </mat-form-field> \n                        <div>\n                            <ng-container *ngFor=\"let error of error_messages.confirmPassword\">\n                                <mat-error class=\"error-message\" *ngIf=\"signUpForm.get('confirmPassword').hasError(error.type) && (signUpForm.get('confirmPassword').dirty || signUpForm.get('confirmPassword').touched)\">\n                                    {{ error.message }}\n                                </mat-error>\n                            </ng-container>\n                            <span id=\"passError\">{{formError}}</span>\n                        </div> \n                    </div>\n                    <button mat-raised-button type=\"submit\" [disabled]=\"!signUpForm.valid\" class=\"btn\" id=\"one\">Sign Up</button>\n                    \n                    <a routerLink=\"/index\" mat-raised-button color=\"accent\" class=\"btns\">Cancel</a>\n                </form>  \n            </mat-card-content>\n        </mat-card>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport { User } from '../models/User';\nimport { Puzzle } from '../models/Puzzle';\nimport { PuzzleRating } from '../models/PuzzleRating';\nimport {HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class APIService {\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * User endpoints start here\n   */\n  //create new user\n  createUser(newUser: User){\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json'} ) };\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/createUser',newUser, httpOptions);\n  }\n\n  loginUser(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/login', currentUser, httpOptions);\n  }\n\n  resetPassword(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.put('https://prometheuspuzzles.herokuapp.com/api/users/resetPassword', currentUser, httpOptions);\n  }\n\n  getUser(token: any){\n    const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json'} ) };\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/getUser',token, httpOptions);\n  }\n\n  updateName(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.put('https://prometheuspuzzles.herokuapp.com/api/users/updateName', currentUser, httpOptions);\n  }\n\n  updateUsername(currentUser: User){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.put('https://prometheuspuzzles.herokuapp.com/api/users/updateUsername', currentUser, httpOptions);\n  }\n\n  getPuzzlesByUser(token: any): Observable<any[]> {\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.post<any[]>('https://prometheuspuzzles.herokuapp.com/api/users/getPuzzlesByUser', token, httpOptions);\n  }\n\n  getPuzzleRatingssByUser(token: any){\n    const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n    return this.http.post('https://prometheuspuzzles.herokuapp.com/api/users/getPuzzleRatingsByUser', token, httpOptions);\n  }\n\n  /**\n   * User endpoints end here\n   */\n\n\n/**\n* Puzzle endpoints start here\n*/\ngetAllPuzzles(){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getAllPuzzles');\n}\n\ngetAllPuzzleByID(puzzleID: number){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getPuzzleByID?Id=' + puzzleID);\n}\n\ncreateNewPuzzle(puzzle: Puzzle){\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n  return this.http.post('https://prometheuspuzzles.herokuapp.com/api/puzzles/createPuzzle', puzzle, httpOptions);\n}\n\ncreateNewPuzzleRating(rating: PuzzleRating){\n  const httpOptions = { headers: new HttpHeaders( { 'Content-Type': 'application/json' })};\n  return this.http.post('https://prometheuspuzzles.herokuapp.com/api/puzzles/createPuzzleRating', rating, httpOptions);\n}\n\ngetAllPuzzleRatings(){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getAllPuzzleRatings');\n}\n\ngetSearchedPuzzles(term: any){\n  return this.http.get('https://prometheuspuzzles.herokuapp.com/api/puzzles/getSearchedPuzzles/' + term);\n}\n\n/**\n* Puzzle endpoints end here\n*/\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}